(function() {var type_impls = {
"dioxus":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a href=\"#examples-7\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a href=\"#recommended-message-style\">Recommended Message Style</a></h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a href=\"#panics-1\">Panics</a></h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a href=\"#examples-8\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a href=\"#examples-9\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a href=\"#examples-10\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a href=\"#examples-11\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a href=\"#examples-12\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a href=\"#examples-13\">Examples</a></h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a href=\"#examples-14\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a href=\"#examples-15\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a href=\"#basic-examples\">Basic examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a href=\"#handling-a-result-based-fallback\">Handling a Result-based fallback</a></h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a href=\"#examples-16\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a href=\"#examples-17\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a href=\"#examples-18\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a href=\"#examples-19\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a href=\"#examples-20\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a href=\"#examples-21\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a href=\"#examples-22\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a href=\"#examples-23\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a href=\"#examples-24\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a href=\"#examples-25\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a href=\"#examples-26\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a href=\"#examples-27\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a href=\"#example\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a href=\"#examples-28\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a href=\"#examples-29\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a href=\"#examples-30\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a href=\"#examples-31\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a href=\"#examples-32\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a href=\"#examples-33\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a href=\"#examples-34\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a href=\"#examples-35\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1125\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1142\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1158\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1175\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2479\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2481\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2489\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2491\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2460\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2465\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2470\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1988-1990\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1993\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2389\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2451\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","dioxus::prelude::Element"],["<section id=\"impl-StructuralEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-StructuralEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.StructuralEq.html\" title=\"trait core::marker::StructuralEq\">StructuralEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralEq","dioxus::prelude::Element"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#829-831\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#849-851\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#874-877\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2137\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2139\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2026\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2044\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","dioxus::prelude::Element"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2135\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2070\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2080\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","dioxus::prelude::Element"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2010\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2020\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Throw-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/dioxus_core/error_boundary.rs.html#253\">source</a><a href=\"#impl-Throw-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"dioxus/prelude/trait.Throw.html\" title=\"trait dioxus::prelude::Throw\">Throw</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"docblock\"><p>Or just throw errors we know about</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Out\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Out\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"dioxus/prelude/trait.Throw.html#associatedtype.Out\" class=\"associatedtype\">Out</a> = T</h4></section></summary><div class='docblock'>The value that will be returned in if the given value is <code>Ok</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.throw\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dioxus_core/error_boundary.rs.html#256\">source</a><a href=\"#method.throw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dioxus/prelude/trait.Throw.html#tymethod.throw\" class=\"fn\">throw</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns an option that evaluates to None if there is an error, injecting the error to the nearest error boundary. <a href=\"dioxus/prelude/trait.Throw.html#tymethod.throw\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.throw_with\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dioxus_core/error_boundary.rs.html#260\">source</a><a href=\"#method.throw_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dioxus/prelude/trait.Throw.html#method.throw_with\" class=\"fn\">throw_with</a>&lt;D&gt;(\n    self,\n    error: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"dioxus/prelude/trait.Throw.html\" title=\"trait dioxus::prelude::Throw\">Throw</a>&gt;::<a class=\"associatedtype\" href=\"dioxus/prelude/trait.Throw.html#associatedtype.Out\" title=\"type dioxus::prelude::Throw::Out\">Out</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + 'static,</div></h4></section></summary><div class='docblock'>Returns an option that evaluates to None if there is an error, injecting the error to the nearest error boundary. <a href=\"dioxus/prelude/trait.Throw.html#method.throw_with\">Read more</a></div></details></div></details>","Throw","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoAttributeValue-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/dioxus_core/nodes.rs.html#956\">source</a><a href=\"#impl-IntoAttributeValue-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"dioxus/prelude/trait.IntoAttributeValue.html\" title=\"trait dioxus::prelude::IntoAttributeValue\">IntoAttributeValue</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"dioxus/prelude/trait.IntoAttributeValue.html\" title=\"trait dioxus::prelude::IntoAttributeValue\">IntoAttributeValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dioxus_core/nodes.rs.html#957\">source</a><a href=\"#method.into_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dioxus/prelude/trait.IntoAttributeValue.html#tymethod.into_value\" class=\"fn\">into_value</a>(self) -&gt; <a class=\"enum\" href=\"dioxus_core/nodes/enum.AttributeValue.html\" title=\"enum dioxus_core::nodes::AttributeValue\">AttributeValue</a></h4></section></summary><div class='docblock'>Convert into an attribute value</div></details></div></details>","IntoAttributeValue","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoDynNode-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/dioxus_core/nodes.rs.html#808\">source</a><a href=\"#impl-IntoDynNode-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"dioxus/prelude/trait.IntoDynNode.html\" title=\"trait dioxus::prelude::IntoDynNode\">IntoDynNode</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"dioxus/prelude/trait.IntoDynNode.html\" title=\"trait dioxus::prelude::IntoDynNode\">IntoDynNode</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_dyn_node\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dioxus_core/nodes.rs.html#809\">source</a><a href=\"#method.into_dyn_node\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dioxus/prelude/trait.IntoDynNode.html#tymethod.into_dyn_node\" class=\"fn\">into_dyn_node</a>(self) -&gt; <a class=\"enum\" href=\"dioxus_core/nodes/enum.DynamicNode.html\" title=\"enum dioxus_core::nodes::DynamicNode\">DynamicNode</a></h4></section></summary><div class='docblock'>Consume this item along with a scopestate and produce a DynamicNode <a href=\"dioxus/prelude/trait.IntoDynNode.html#tymethod.into_dyn_node\">Read more</a></div></details></div></details>","IntoDynNode","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.196/src/serde/de/impls.rs.html#829-831\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"dioxus/prelude/server_fn/serde/trait.Deserialize.html\" title=\"trait dioxus::prelude::server_fn::serde::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"dioxus/prelude/server_fn/serde/trait.Deserialize.html\" title=\"trait dioxus::prelude::server_fn::serde::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.196/src/serde/de/impls.rs.html#833-835\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dioxus/prelude/server_fn/serde/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"dioxus/prelude/server_fn/serde/trait.Deserializer.html\" title=\"trait dioxus::prelude::server_fn::serde::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"dioxus/prelude/server_fn/serde/trait.Deserializer.html#associatedtype.Error\" title=\"type dioxus::prelude::server_fn::serde::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"dioxus/prelude/server_fn/serde/trait.Deserializer.html\" title=\"trait dioxus::prelude::server_fn::serde::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"dioxus/prelude/server_fn/serde/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.196/src/serde/ser/impls.rs.html#99-101\">source</a><a href=\"#impl-Serialize-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"dioxus/prelude/server_fn/serde/trait.Serialize.html\" title=\"trait dioxus::prelude::server_fn::serde::Serialize\">Serialize</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"dioxus/prelude/server_fn/serde/trait.Serialize.html\" title=\"trait dioxus::prelude::server_fn::serde::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.196/src/serde/ser/impls.rs.html#104-106\">source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dioxus/prelude/server_fn/serde/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"dioxus/prelude/server_fn/serde/trait.Serializer.html\" title=\"trait dioxus::prelude::server_fn::serde::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"dioxus/prelude/server_fn/serde/trait.Serializer.html#associatedtype.Ok\" title=\"type dioxus::prelude::server_fn::serde::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"dioxus/prelude/server_fn/serde/trait.Serializer.html\" title=\"trait dioxus::prelude::server_fn::serde::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"dioxus/prelude/server_fn/serde/trait.Serializer.html#associatedtype.Error\" title=\"type dioxus::prelude::server_fn::serde::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"dioxus/prelude/server_fn/serde/trait.Serializer.html\" title=\"trait dioxus::prelude::server_fn::serde::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"dioxus/prelude/server_fn/serde/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Value-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-Value-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Value for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: Value,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.record\" class=\"method trait-impl\"><a href=\"#method.record\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">record</a>(&amp;self, key: &amp;Field, visitor: &amp;mut dyn Visit)</h4></section></summary><div class='docblock'>Visits this value with the given <code>Visitor</code>.</div></details></div></details>","Value","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToValue-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/value.rs.html#503-505\">source</a><a href=\"#impl-ToValue-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/log/0.4.20/log/kv/value/trait.ToValue.html\" title=\"trait log::kv::value::ToValue\">ToValue</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/log/0.4.20/log/kv/value/trait.ToValue.html\" title=\"trait log::kv::value::ToValue\">ToValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/value.rs.html#507\">source</a><a href=\"#method.to_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/log/0.4.20/log/kv/value/trait.ToValue.html#tymethod.to_value\" class=\"fn\">to_value</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/log/0.4.20/log/kv/value/struct.Value.html\" title=\"struct log::kv::value::Value\">Value</a>&lt;'_&gt;</h4></section></summary><div class='docblock'>Perform the conversion.</div></details></div></details>","ToValue","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Source-for-Option%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/source.rs.html#173-175\">source</a><a href=\"#impl-Source-for-Option%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html\" title=\"trait log::kv::source::Source\">Source</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html\" title=\"trait log::kv::source::Source\">Source</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.visit\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/source.rs.html#177\">source</a><a href=\"#method.visit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#tymethod.visit\" class=\"fn\">visit</a>&lt;'kvs&gt;(&amp;'kvs self, visitor: &amp;mut dyn <a class=\"trait\" href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Visitor.html\" title=\"trait log::kv::source::Visitor\">Visitor</a>&lt;'kvs&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/log/0.4.20/log/kv/error/struct.Error.html\" title=\"struct log::kv::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Visit key-value pairs. <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#tymethod.visit\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/source.rs.html#185\">source</a><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#method.get\" class=\"fn\">get</a>&lt;'v&gt;(&amp;'v self, key: <a class=\"struct\" href=\"https://docs.rs/log/0.4.20/log/kv/key/struct.Key.html\" title=\"struct log::kv::key::Key\">Key</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://docs.rs/log/0.4.20/log/kv/value/struct.Value.html\" title=\"struct log::kv::value::Value\">Value</a>&lt;'v&gt;&gt;</h4></section></summary><div class='docblock'>Get the value for a given key. <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#method.get\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/source.rs.html#189\">source</a><a href=\"#method.count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#method.count\" class=\"fn\">count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Count the number of key-value pairs that can be visited. <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#method.count\">Read more</a></div></details></div></details>","Source","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToTokens-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/quote/1.0.35/src/quote/to_tokens.rs.html#107\">source</a><a href=\"#impl-ToTokens-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html\" title=\"trait quote::to_tokens::ToTokens\">ToTokens</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html\" title=\"trait quote::to_tokens::ToTokens\">ToTokens</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_tokens\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/quote/1.0.35/src/quote/to_tokens.rs.html#108\">source</a><a href=\"#method.to_tokens\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html#tymethod.to_tokens\" class=\"fn\">to_tokens</a>(&amp;self, tokens: &amp;mut <a class=\"struct\" href=\"https://docs.rs/proc-macro2/1.0.78/proc_macro2/struct.TokenStream.html\" title=\"struct proc_macro2::TokenStream\">TokenStream</a>)</h4></section></summary><div class='docblock'>Write <code>self</code> to the given <code>TokenStream</code>. <a href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html#tymethod.to_tokens\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_token_stream\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/quote/1.0.35/src/quote/to_tokens.rs.html#59\">source</a><a href=\"#method.to_token_stream\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html#method.to_token_stream\" class=\"fn\">to_token_stream</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/proc-macro2/1.0.78/proc_macro2/struct.TokenStream.html\" title=\"struct proc_macro2::TokenStream\">TokenStream</a></h4></section></summary><div class='docblock'>Convert <code>self</code> directly into a <code>TokenStream</code> object. <a href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html#method.to_token_stream\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_token_stream\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/quote/1.0.35/src/quote/to_tokens.rs.html#69-71\">source</a><a href=\"#method.into_token_stream\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html#method.into_token_stream\" class=\"fn\">into_token_stream</a>(self) -&gt; <a class=\"struct\" href=\"https://docs.rs/proc-macro2/1.0.78/proc_macro2/struct.TokenStream.html\" title=\"struct proc_macro2::TokenStream\">TokenStream</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Convert <code>self</code> directly into a <code>TokenStream</code> object. <a href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html#method.into_token_stream\">Read more</a></div></details></div></details>","ToTokens","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Parse-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.48/src/syn/parse.rs.html#1171\">source</a><a href=\"#impl-Parse-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/syn/2.0.48/syn/parse/trait.Parse.html\" title=\"trait syn::parse::Parse\">Parse</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/syn/2.0.48/syn/parse/trait.Parse.html\" title=\"trait syn::parse::Parse\">Parse</a> + <a class=\"trait\" href=\"https://docs.rs/syn/2.0.48/syn/token/trait.Token.html\" title=\"trait syn::token::Token\">Token</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.parse\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.48/src/syn/parse.rs.html#1172\">source</a><a href=\"#method.parse\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/syn/2.0.48/syn/parse/trait.Parse.html#tymethod.parse\" class=\"fn\">parse</a>(input: &amp;<a class=\"struct\" href=\"https://docs.rs/syn/2.0.48/syn/parse/struct.ParseBuffer.html\" title=\"struct syn::parse::ParseBuffer\">ParseBuffer</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, <a class=\"struct\" href=\"https://docs.rs/syn/2.0.48/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a>&gt;</h4></section></div></details>","Parse","dioxus::prelude::Element"],["<section id=\"impl-Nullable-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/petgraph/0.4/src/petgraph/matrix_graph.rs.html#65\">source</a><a href=\"#impl-Nullable-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/petgraph/0.4/petgraph/matrix_graph/trait.Nullable.html\" title=\"trait petgraph::matrix_graph::Nullable\">Nullable</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","Nullable","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNotZero%3CT%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/petgraph/0.4/src/petgraph/matrix_graph.rs.html#131\">source</a><a href=\"#impl-From%3CNotZero%3CT%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://docs.rs/petgraph/0.4/petgraph/matrix_graph/struct.NotZero.html\" title=\"struct petgraph::matrix_graph::NotZero\">NotZero</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/petgraph/0.4/petgraph/matrix_graph/trait.Zero.html\" title=\"trait petgraph::matrix_graph::Zero\">Zero</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/petgraph/0.4/src/petgraph/matrix_graph.rs.html#132\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(not_zero: <a class=\"struct\" href=\"https://docs.rs/petgraph/0.4/petgraph/matrix_graph/struct.NotZero.html\" title=\"struct petgraph::matrix_graph::NotZero\">NotZero</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<NotZero<T>>","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnwrapThrowExt%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/lib.rs.html#1345\">source</a><a href=\"#impl-UnwrapThrowExt%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/trait.UnwrapThrowExt.html\" title=\"trait wasm_bindgen::UnwrapThrowExt\">UnwrapThrowExt</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect_throw\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/lib.rs.html#1347\">source</a><a href=\"#method.expect_throw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/trait.UnwrapThrowExt.html#tymethod.expect_throw\" class=\"fn\">expect_throw</a>(self, message: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class='docblock'>Unwrap this container’s <code>T</code> value, or throw an error to JS with the\ngiven message if the <code>T</code> value is unavailable (e.g. an <code>Option&lt;T&gt;</code> is\n<code>None</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_throw\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/lib.rs.html#1323\">source</a><a href=\"#method.unwrap_throw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/trait.UnwrapThrowExt.html#method.unwrap_throw\" class=\"fn\">unwrap_throw</a>(self) -&gt; T</h4></section></summary><div class='docblock'>Unwrap this <code>Option</code> or <code>Result</code>, but instead of panicking on failure,\nthrow an exception to JavaScript.</div></details></div></details>","UnwrapThrowExt<T>","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WasmAbi-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#34\">source</a><a href=\"#impl-WasmAbi-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&lt;Prim4 = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Prim1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Prim1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim1\" class=\"associatedtype\">Prim1</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Whether this <code>Option</code> is a <code>Some</code> value.</p>\n</div></details><section id=\"associatedtype.Prim2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Prim2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim2\" class=\"associatedtype\">Prim2</a> = &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim1\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim1\">Prim1</a></h4></section><section id=\"associatedtype.Prim3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Prim3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim3\" class=\"associatedtype\">Prim3</a> = &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim2\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim2\">Prim2</a></h4></section><section id=\"associatedtype.Prim4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Prim4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim4\" class=\"associatedtype\">Prim4</a> = &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim3\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim3\">Prim3</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.split\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#42\">source</a><a href=\"#method.split\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#tymethod.split\" class=\"fn\">split</a>(\n    self\n) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u32.html\">u32</a>, &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim1\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim1\">Prim1</a>, &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim2\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim2\">Prim2</a>, &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim3\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim3\">Prim3</a>)</h4></section></summary><div class='docblock'>Splits this type up into primitives to be sent over the ABI.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.join\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#58\">source</a><a href=\"#method.join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#tymethod.join\" class=\"fn\">join</a>(\n    is_some: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u32.html\">u32</a>,\n    prim1: &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim1\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim1\">Prim1</a>,\n    prim2: &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim2\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim2\">Prim2</a>,\n    prim3: &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim3\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim3\">Prim3</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Reconstructs this type from primitives received over the ABI.</div></details></div></details>","WasmAbi","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromWasmAbi-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#305\">source</a><a href=\"#impl-FromWasmAbi-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::FromWasmAbi\">FromWasmAbi</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.OptionFromWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::OptionFromWasmAbi\">OptionFromWasmAbi</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Abi\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Abi\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html#associatedtype.Abi\" class=\"associatedtype\">Abi</a> = &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::FromWasmAbi\">FromWasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html#associatedtype.Abi\" title=\"type wasm_bindgen::convert::traits::FromWasmAbi::Abi\">Abi</a></h4></section></summary><div class='docblock'>The wasm ABI type that this converts from when coming back out from the\nABI boundary.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_abi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#309\">source</a><a href=\"#method.from_abi\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html#tymethod.from_abi\" class=\"fn\">from_abi</a>(js: &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::FromWasmAbi\">FromWasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html#associatedtype.Abi\" title=\"type wasm_bindgen::convert::traits::FromWasmAbi::Abi\">Abi</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Recover a <code>Self</code> from <code>Self::Abi</code>. <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html#tymethod.from_abi\">Read more</a></div></details></div></details>","FromWasmAbi","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoWasmAbi-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#293\">source</a><a href=\"#impl-IntoWasmAbi-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::IntoWasmAbi\">IntoWasmAbi</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.OptionIntoWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::OptionIntoWasmAbi\">OptionIntoWasmAbi</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Abi\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Abi\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html#associatedtype.Abi\" class=\"associatedtype\">Abi</a> = &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::IntoWasmAbi\">IntoWasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html#associatedtype.Abi\" title=\"type wasm_bindgen::convert::traits::IntoWasmAbi::Abi\">Abi</a></h4></section></summary><div class='docblock'>The wasm ABI type that this converts into when crossing the ABI\nboundary.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_abi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#297\">source</a><a href=\"#method.into_abi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html#tymethod.into_abi\" class=\"fn\">into_abi</a>(self) -&gt; &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::IntoWasmAbi\">IntoWasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html#associatedtype.Abi\" title=\"type wasm_bindgen::convert::traits::IntoWasmAbi::Abi\">Abi</a></h4></section></summary><div class='docblock'>Convert <code>self</code> into <code>Self::Abi</code> so that it can be sent across the wasm\nABI boundary.</div></details></div></details>","IntoWasmAbi","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromValue%3C'a%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-FromValue%3C'a%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, C, E&gt; FromValue&lt;'a&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: FromValue&lt;'a, Checker = C&gt; + StaticType,\n    C: ValueTypeChecker&lt;Error = ValueTypeMismatchOrNoneError&lt;E&gt;&gt;,\n    E: <a class=\"trait\" href=\"dioxus/prelude/server_fn/serde/ser/trait.StdError.html\" title=\"trait dioxus::prelude::server_fn::serde::ser::StdError\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,</div></h3></section></summary><div class=\"docblock\"><p>Blanket implementation for all optional types.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Checker\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Checker\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Checker</a> = ValueTypeOrNoneChecker&lt;T, C, E&gt;</h4></section></summary><div class='docblock'>Value type checker.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_value\" class=\"method trait-impl\"><a href=\"#method.from_value\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">from_value</a>(value: &amp;'a Value) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Get the contained value from a <code>Value</code>. <a>Read more</a></div></details></div></details>","FromValue<'a>","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StaticVariantType-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-StaticVariantType-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; StaticVariantType for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: StaticVariantType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.static_variant_type\" class=\"method trait-impl\"><a href=\"#method.static_variant_type\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">static_variant_type</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'static, VariantTy&gt;</h4></section></summary><div class='docblock'>Returns the <code>VariantType</code> corresponding to <code>Self</code>.</div></details></div></details>","StaticVariantType","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromGlibPtrBorrow%3CP%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-FromGlibPtrBorrow%3CP%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, T&gt; FromGlibPtrBorrow&lt;P&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: Ptr,\n    T: FromGlibPtrBorrow&lt;P&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_glib_borrow\" class=\"method trait-impl\"><a href=\"#method.from_glib_borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">from_glib_borrow</a>(ptr: P) -&gt; Borrowed&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>Safety <a>Read more</a></div></details></div></details>","FromGlibPtrBorrow<P>","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromGlib%3CG%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-FromGlib%3CG%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;G, T&gt; FromGlib&lt;G&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,\n    T: TryFromGlib&lt;G, Error = GlibNoneError&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_glib\" class=\"method trait-impl\"><a href=\"#method.from_glib\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">from_glib</a>(val: G) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></div></details>","FromGlib<G>","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToGlibPtr%3C'a,+P%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-ToGlibPtr%3C'a,+P%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, P, T&gt; ToGlibPtr&lt;'a, P&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: Ptr,\n    T: ToGlibPtr&lt;'a, P&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Storage\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Storage\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Storage</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;T as ToGlibPtr&lt;'a, P&gt;&gt;::Storage&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_glib_none\" class=\"method trait-impl\"><a href=\"#method.to_glib_none\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_glib_none</a>(&amp;'a self) -&gt; Stash&lt;'a, P, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>Transfer: none. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_glib_full\" class=\"method trait-impl\"><a href=\"#method.to_glib_full\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_glib_full</a>(&amp;self) -&gt; P</h4></section></summary><div class='docblock'>Transfer: full. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_glib_container\" class=\"method trait-impl\"><a href=\"#method.to_glib_container\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_glib_container</a>(&amp;'a self) -&gt; Stash&lt;'a, P, Self&gt;</h4></section></summary><div class='docblock'>Transfer: container. <a>Read more</a></div></details></div></details>","ToGlibPtr<'a, P>","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoGlib-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-IntoGlib-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; IntoGlib for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: OptionIntoGlib,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.GlibType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.GlibType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">GlibType</a> = &lt;T as IntoGlib&gt;::GlibType</h4></section><section id=\"method.into_glib\" class=\"method trait-impl\"><a href=\"#method.into_glib\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_glib</a>(self) -&gt; &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as IntoGlib&gt;::GlibType</h4></section></div></details>","IntoGlib","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CastNone-for-Option%3CI%3E\" class=\"impl\"><a href=\"#impl-CastNone-for-Option%3CI%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; CastNone for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;I&gt;<div class=\"where\">where\n    I: ObjectType,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Inner\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Inner\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Inner</a> = I</h4></section><section id=\"method.and_downcast\" class=\"method trait-impl\"><a href=\"#method.and_downcast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_downcast</a>&lt;T&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: ObjectType,\n    &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;I&gt; as CastNone&gt;::Inner: MayDowncastTo&lt;T&gt;,</div></h4></section><section id=\"method.and_downcast_ref\" class=\"method trait-impl\"><a href=\"#method.and_downcast_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_downcast_ref</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>&gt;<div class=\"where\">where\n    T: ObjectType,\n    &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;I&gt; as CastNone&gt;::Inner: MayDowncastTo&lt;T&gt;,</div></h4></section><section id=\"method.and_upcast\" class=\"method trait-impl\"><a href=\"#method.and_upcast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_upcast</a>&lt;T&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: ObjectType,\n    &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;I&gt; as CastNone&gt;::Inner: IsA&lt;T&gt;,</div></h4></section><section id=\"method.and_upcast_ref\" class=\"method trait-impl\"><a href=\"#method.and_upcast_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_upcast_ref</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>&gt;<div class=\"where\">where\n    T: ObjectType,\n    &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;I&gt; as CastNone&gt;::Inner: IsA&lt;T&gt;,</div></h4></section><section id=\"method.and_dynamic_cast\" class=\"method trait-impl\"><a href=\"#method.and_dynamic_cast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_dynamic_cast</a>&lt;T&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;I&gt;&gt;<div class=\"where\">where\n    T: ObjectType,</div></h4></section><section id=\"method.and_dynamic_cast_ref\" class=\"method trait-impl\"><a href=\"#method.and_dynamic_cast_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_dynamic_cast_ref</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>&gt;<div class=\"where\">where\n    T: ObjectType,</div></h4></section></div></details>","CastNone","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromGlibPtrFull%3CP%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-FromGlibPtrFull%3CP%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, T&gt; FromGlibPtrFull&lt;P&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: Ptr,\n    T: FromGlibPtrFull&lt;P&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_glib_full\" class=\"method trait-impl\"><a href=\"#method.from_glib_full\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">from_glib_full</a>(ptr: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Safety <a>Read more</a></div></details></div></details>","FromGlibPtrFull<P>","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoOptionalGStr-for-Option%3CS%3E\" class=\"impl\"><a href=\"#impl-IntoOptionalGStr-for-Option%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; IntoOptionalGStr for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt;<div class=\"where\">where\n    S: IntoGStr,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.run_with_gstr\" class=\"method trait-impl\"><a href=\"#method.run_with_gstr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">run_with_gstr</a>&lt;T, F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;GStr&gt;) -&gt; T,</div></h4></section></div></details>","IntoOptionalGStr","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasParamSpec-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-HasParamSpec-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; HasParamSpec for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: ToValueOptional + HasParamSpec,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.ParamSpec\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ParamSpec\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">ParamSpec</a> = &lt;T as HasParamSpec&gt;::ParamSpec</h4></section><details class=\"toggle\" open><summary><section id=\"associatedtype.SetValue\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.SetValue\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">SetValue</a> = &lt;T as HasParamSpec&gt;::SetValue</h4></section></summary><div class='docblock'>Preferred value to be used as setter for the associated ParamSpec.</div></details><section id=\"associatedtype.BuilderFn\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.BuilderFn\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">BuilderFn</a> = &lt;T as HasParamSpec&gt;::BuilderFn</h4></section><section id=\"method.param_spec_builder\" class=\"method trait-impl\"><a href=\"#method.param_spec_builder\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">param_spec_builder</a>() -&gt; &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as HasParamSpec&gt;::BuilderFn</h4></section></div></details>","HasParamSpec","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ValueType-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-ValueType-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C, E&gt; ValueType for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: for&lt;'a&gt; FromValue&lt;'a, Checker = C&gt; + ValueTypeOptional + StaticType + 'static,\n    C: ValueTypeChecker&lt;Error = ValueTypeMismatchOrNoneError&lt;E&gt;&gt;,\n    E: <a class=\"trait\" href=\"dioxus/prelude/server_fn/serde/ser/trait.StdError.html\" title=\"trait dioxus::prelude::server_fn::serde::ser::StdError\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Type\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Type\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Type</a> = &lt;T as ValueType&gt;::Type</h4></section></summary><div class='docblock'>Type to get the <code>Type</code> from. <a>Read more</a></div></details></div></details>","ValueType","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToVariant-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-ToVariant-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ToVariant for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: StaticVariantType + ToVariant,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_variant\" class=\"method trait-impl\"><a href=\"#method.to_variant\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_variant</a>(&amp;self) -&gt; Variant</h4></section></summary><div class='docblock'>Returns a <code>Variant</code> clone of <code>self</code>.</div></details></div></details>","ToVariant","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToValue-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-ToValue-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ToValue for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: ToValueOptional + StaticType,</div></h3></section></summary><div class=\"docblock\"><p>Blanket implementation for all optional types.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_value\" class=\"method trait-impl\"><a href=\"#method.to_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_value</a>(&amp;self) -&gt; Value</h4></section></summary><div class='docblock'>Convert a value to a <code>Value</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_type\" class=\"method trait-impl\"><a href=\"#method.value_type\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">value_type</a>(&amp;self) -&gt; Type</h4></section></summary><div class='docblock'>Returns the type identifer of <code>self</code>. <a>Read more</a></div></details></div></details>","ToValue","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoGlibPtr%3CP%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-IntoGlibPtr%3CP%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, T&gt; IntoGlibPtr&lt;P&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: Ptr,\n    T: IntoGlibPtr&lt;P&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_glib_ptr\" class=\"method trait-impl\"><a href=\"#method.into_glib_ptr\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">into_glib_ptr</a>(self) -&gt; P</h4></section></summary><div class='docblock'>Transfer: full.</div></details></div></details>","IntoGlibPtr<P>","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromGlibPtrNone%3CP%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-FromGlibPtrNone%3CP%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, T&gt; FromGlibPtrNone&lt;P&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: Ptr,\n    T: FromGlibPtrNone&lt;P&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_glib_none\" class=\"method trait-impl\"><a href=\"#method.from_glib_none\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">from_glib_none</a>(ptr: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Safety <a>Read more</a></div></details></div></details>","FromGlibPtrNone<P>","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StaticType-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-StaticType-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; StaticType for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: ToValueOptional + StaticType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.static_type\" class=\"method trait-impl\"><a href=\"#method.static_type\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">static_type</a>() -&gt; Type</h4></section></summary><div class='docblock'>Returns the type identifier of <code>Self</code>.</div></details></div></details>","StaticType","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromVariant-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-FromVariant-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FromVariant for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: StaticVariantType + FromVariant,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_variant\" class=\"method trait-impl\"><a href=\"#method.from_variant\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_variant</a>(variant: &amp;Variant) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>Tries to extract a value. <a>Read more</a></div></details></div></details>","FromVariant","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3COptional%3CT%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3COptional%3CT%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Optional&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: Optional&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Optional<T>>","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCtOption%3CT%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.5.0/src/subtle/lib.rs.html#654\">source</a><a href=\"#impl-From%3CCtOption%3CT%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://docs.rs/subtle/2.5.0/subtle/struct.CtOption.html\" title=\"struct subtle::CtOption\">CtOption</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.5.0/src/subtle/lib.rs.html#664\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(source: <a class=\"struct\" href=\"https://docs.rs/subtle/2.5.0/subtle/struct.CtOption.html\" title=\"struct subtle::CtOption\">CtOption</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Convert the <code>CtOption&lt;T&gt;</code> wrapper into an <code>Option&lt;T&gt;</code>, depending on whether\nthe underlying <code>is_some</code> <code>Choice</code> was a <code>0</code> or a <code>1</code> once unwrapped.</p>\n<h5 id=\"note\"><a href=\"#note\">Note</a></h5>\n<p>This function exists to avoid ending up with ugly, verbose and/or bad handled\nconversions from the <code>CtOption&lt;T&gt;</code> wraps to an <code>Option&lt;T&gt;</code> or <code>Result&lt;T, E&gt;</code>.\nThis implementation doesn’t intend to be constant-time nor try to protect the\nleakage of the <code>T</code> since the <code>Option&lt;T&gt;</code> will do it anyways.</p>\n</div></details></div></details>","From<CtOption<T>>","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OrderedStream-for-Option%3CS%3E\" class=\"impl\"><a href=\"#impl-OrderedStream-for-Option%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; OrderedStream for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt;<div class=\"where\">where\n    S: OrderedStream,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Data\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Data\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Data</a> = &lt;S as OrderedStream&gt;::Data</h4></section></summary><div class='docblock'>The unordered data carried by this stream <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Ordering\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Ordering\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Ordering</a> = &lt;S as OrderedStream&gt;::Ordering</h4></section></summary><div class='docblock'>The type ordered by this stream. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_next_before\" class=\"method trait-impl\"><a href=\"#method.poll_next_before\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_next_before</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    before: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt; as OrderedStream&gt;::Ordering&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;PollResult&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt; as OrderedStream&gt;::Ordering, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt; as OrderedStream&gt;::Data&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to pull out the next value of this stream, registering the current task for wakeup\nif needed, and returning <code>NoneBefore</code> if it is known that the stream will not produce any\nmore values ordered before the given point. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.position_hint\" class=\"method trait-impl\"><a href=\"#method.position_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">position_hint</a>(\n    &amp;self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;MaybeBorrowed&lt;'_, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt; as OrderedStream&gt;::Ordering&gt;&gt;</h4></section></summary><div class='docblock'>The minimum value of the ordering for any future items. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>&gt;)</h4></section></summary><div class='docblock'>Returns the bounds on the remaining length of the stream.</div></details></div></details>","OrderedStream","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FusedOrderedStream-for-Option%3CS%3E\" class=\"impl\"><a href=\"#impl-FusedOrderedStream-for-Option%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; FusedOrderedStream for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt;<div class=\"where\">where\n    S: FusedOrderedStream,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_terminated\" class=\"method trait-impl\"><a href=\"#method.is_terminated\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_terminated</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the stream should no longer be polled.</div></details></div></details>","FusedOrderedStream","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CInheritable%3CT%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CInheritable%3CT%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Inheritable&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: Inheritable&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p><code>None</code> if inherited</p>\n</div></details></div></details>","From<Inheritable<T>>","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Context%3CT,+Infallible%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/anyhow/1.0.79/src/anyhow/context.rs.html#90\">source</a><a href=\"#impl-Context%3CT,+Infallible%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/anyhow/1.0.79/anyhow/trait.Context.html\" title=\"trait anyhow::Context\">Context</a>&lt;T, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"docblock\">\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>anyhow::{Context, <span class=\"prelude-ty\">Result</span>};\n\n<span class=\"kw\">fn </span>maybe_get() -&gt; <span class=\"prelude-ty\">Option</span>&lt;T&gt; {\n    ...\n}\n\n<span class=\"kw\">fn </span>demo() -&gt; <span class=\"prelude-ty\">Result</span>&lt;()&gt; {\n    <span class=\"kw\">let </span>t = maybe_get().context(<span class=\"string\">\"there is no T\"</span>)<span class=\"question-mark\">?</span>;\n    ...\n}</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.context\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/anyhow/1.0.79/src/anyhow/context.rs.html#91-93\">source</a><a href=\"#method.context\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/anyhow/1.0.79/anyhow/trait.Context.html#tymethod.context\" class=\"fn\">context</a>&lt;C&gt;(self, context: C) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"https://docs.rs/anyhow/1.0.79/anyhow/struct.Error.html\" title=\"struct anyhow::Error\">Error</a>&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class='docblock'>Wrap the error value with additional context.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_context\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/anyhow/1.0.79/src/anyhow/context.rs.html#103-106\">source</a><a href=\"#method.with_context\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/anyhow/1.0.79/anyhow/trait.Context.html#tymethod.with_context\" class=\"fn\">with_context</a>&lt;C, F&gt;(self, context: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"https://docs.rs/anyhow/1.0.79/anyhow/struct.Error.html\" title=\"struct anyhow::Error\">Error</a>&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; C,</div></h4></section></summary><div class='docblock'>Wrap the error value with additional context that is evaluated lazily\nonly once an error does occur.</div></details></div></details>","Context<T, Infallible>","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromParallelIterator%3COption%3CT%3E%3E-for-Option%3CC%3E\" class=\"impl\"><a href=\"#impl-FromParallelIterator%3COption%3CT%3E%3E-for-Option%3CC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, T&gt; FromParallelIterator&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;C&gt;<div class=\"where\">where\n    C: FromParallelIterator&lt;T&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section></summary><div class=\"docblock\"><p>Collect an arbitrary <code>Option</code>-wrapped collection.</p>\n<p>If any item is <code>None</code>, then all previous items collected are discarded,\nand it returns only <code>None</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_par_iter\" class=\"method trait-impl\"><a href=\"#method.from_par_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_par_iter</a>&lt;I&gt;(par_iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;C&gt;<div class=\"where\">where\n    I: IntoParallelIterator&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;,</div></h4></section></summary><div class='docblock'>Creates an instance of the collection from the parallel iterator <code>par_iter</code>. <a>Read more</a></div></details></div></details>","FromParallelIterator<Option<T>>","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoParallelIterator-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-IntoParallelIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; IntoParallelIterator for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of item that the parallel iterator will produce.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Iter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Iter</a> = IntoIter&lt;T&gt;</h4></section></summary><div class='docblock'>The parallel iterator type that will be created.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_par_iter\" class=\"method trait-impl\"><a href=\"#method.into_par_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_par_iter</a>(self) -&gt; &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as IntoParallelIterator&gt;::Iter</h4></section></summary><div class='docblock'>Converts <code>self</code> into a parallel iterator. <a>Read more</a></div></details></div></details>","IntoParallelIterator","dioxus::prelude::Element"],["<section id=\"impl-Pod-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-Pod-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Pod for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: PodInOption,</div></h3></section>","Pod","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zeroable-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-Zeroable-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Zeroable for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: ZeroableInOption,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroed\" class=\"method trait-impl\"><a href=\"#method.zeroed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zeroed</a>() -&gt; Self</h4></section></summary><div class='docblock'>Calls <a href=\"https://doc.rust-lang.org/1.76.0/core/mem/fn.zeroed.html\" title=\"fn core::mem::zeroed\"><code>zeroed</code></a>. <a>Read more</a></div></details></div></details>","Zeroable","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ValidateResult-for-Option%3CS%3E\" class=\"impl\"><a href=\"#impl-ValidateResult-for-Option%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; ValidateResult for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt;<div class=\"where\">where\n    S: ValidateResult,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.validate_result\" class=\"method trait-impl\"><a href=\"#method.validate_result\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">validate_result</a>(\n    &amp;self,\n    other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt;,\n    options: ValidationOptions,\n    location: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class='docblock'>Compare self with the other.\nExceptional behaviour: <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.assert_equals_result\" class=\"method trait-impl\"><a href=\"#method.assert_equals_result\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">assert_equals_result</a>(&amp;self, result: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Compare self with the other. Panics if not equal. <a>Read more</a></div></details></div></details>","ValidateResult","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SerializeAs%3COption%3CT%3E%3E-for-Option%3CU%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.6.0/src/serde_with/ser/impls.rs.html#118-120\">source</a><a href=\"#impl-SerializeAs%3COption%3CT%3E%3E-for-Option%3CU%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.6.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.6.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.6.0/src/serde_with/ser/impls.rs.html#122-124\">source</a><a href=\"#method.serialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.6.0/serde_with/ser/trait.SerializeAs.html#tymethod.serialize_as\" class=\"fn\">serialize_as</a>&lt;S&gt;(\n    source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,\n    serializer: S\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"dioxus/prelude/server_fn/serde/trait.Serializer.html\" title=\"trait dioxus::prelude::server_fn::serde::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"dioxus/prelude/server_fn/serde/trait.Serializer.html#associatedtype.Ok\" title=\"type dioxus::prelude::server_fn::serde::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"dioxus/prelude/server_fn/serde/trait.Serializer.html\" title=\"trait dioxus::prelude::server_fn::serde::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"dioxus/prelude/server_fn/serde/trait.Serializer.html#associatedtype.Error\" title=\"type dioxus::prelude::server_fn::serde::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"dioxus/prelude/server_fn/serde/trait.Serializer.html\" title=\"trait dioxus::prelude::server_fn::serde::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer.</div></details></div></details>","SerializeAs<Option<T>>","dioxus::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DeserializeAs%3C'de,+Option%3CT%3E%3E-for-Option%3CU%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.6.0/src/serde_with/de/impls.rs.html#119-121\">source</a><a href=\"#impl-DeserializeAs%3C'de,+Option%3CT%3E%3E-for-Option%3CU%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, U&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.6.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.6.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.6.0/src/serde_with/de/impls.rs.html#123-125\">source</a><a href=\"#method.deserialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.6.0/serde_with/de/trait.DeserializeAs.html#tymethod.deserialize_as\" class=\"fn\">deserialize_as</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"dioxus/prelude/server_fn/serde/trait.Deserializer.html\" title=\"trait dioxus::prelude::server_fn::serde::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"dioxus/prelude/server_fn/serde/trait.Deserializer.html#associatedtype.Error\" title=\"type dioxus::prelude::server_fn::serde::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"dioxus/prelude/server_fn/serde/trait.Deserializer.html\" title=\"trait dioxus::prelude::server_fn::serde::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer.</div></details></div></details>","DeserializeAs<'de, Option<T>>","dioxus::prelude::Element"]],
"dioxus_core":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a href=\"#examples-7\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a href=\"#recommended-message-style\">Recommended Message Style</a></h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a href=\"#panics-1\">Panics</a></h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a href=\"#examples-8\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a href=\"#examples-9\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a href=\"#examples-10\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a href=\"#examples-11\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a href=\"#examples-12\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a href=\"#examples-13\">Examples</a></h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a href=\"#examples-14\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a href=\"#examples-15\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a href=\"#basic-examples\">Basic examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a href=\"#handling-a-result-based-fallback\">Handling a Result-based fallback</a></h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a href=\"#examples-16\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a href=\"#examples-17\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a href=\"#examples-18\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a href=\"#examples-19\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a href=\"#examples-20\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a href=\"#examples-21\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a href=\"#examples-22\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a href=\"#examples-23\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a href=\"#examples-24\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a href=\"#examples-25\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a href=\"#examples-26\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a href=\"#examples-27\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a href=\"#example\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a href=\"#examples-28\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a href=\"#examples-29\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a href=\"#examples-30\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a href=\"#examples-31\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a href=\"#examples-32\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a href=\"#examples-33\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a href=\"#examples-34\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a href=\"#examples-35\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1125\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1142\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1158\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1175\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2479\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2481\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2489\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2491\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2460\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2465\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2470\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1988-1990\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1993\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2389\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2451\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","dioxus_core::innerlude::Element"],["<section id=\"impl-StructuralEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-StructuralEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.StructuralEq.html\" title=\"trait core::marker::StructuralEq\">StructuralEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralEq","dioxus_core::innerlude::Element"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#829-831\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#849-851\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#874-877\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2137\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2139\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2026\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2044\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","dioxus_core::innerlude::Element"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2135\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2070\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2080\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","dioxus_core::innerlude::Element"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2010\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2020\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.196/src/serde/de/impls.rs.html#829-831\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.196/src/serde/de/impls.rs.html#833-835\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.196/src/serde/ser/impls.rs.html#99-101\">source</a><a href=\"#impl-Serialize-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.196/src/serde/ser/impls.rs.html#104-106\">source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Value-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-Value-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Value for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: Value,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.record\" class=\"method trait-impl\"><a href=\"#method.record\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">record</a>(&amp;self, key: &amp;Field, visitor: &amp;mut dyn Visit)</h4></section></summary><div class='docblock'>Visits this value with the given <code>Visitor</code>.</div></details></div></details>","Value","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToValue-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/value.rs.html#503-505\">source</a><a href=\"#impl-ToValue-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/log/0.4.20/log/kv/value/trait.ToValue.html\" title=\"trait log::kv::value::ToValue\">ToValue</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/log/0.4.20/log/kv/value/trait.ToValue.html\" title=\"trait log::kv::value::ToValue\">ToValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/value.rs.html#507\">source</a><a href=\"#method.to_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/log/0.4.20/log/kv/value/trait.ToValue.html#tymethod.to_value\" class=\"fn\">to_value</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/log/0.4.20/log/kv/value/struct.Value.html\" title=\"struct log::kv::value::Value\">Value</a>&lt;'_&gt;</h4></section></summary><div class='docblock'>Perform the conversion.</div></details></div></details>","ToValue","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Source-for-Option%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/source.rs.html#173-175\">source</a><a href=\"#impl-Source-for-Option%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html\" title=\"trait log::kv::source::Source\">Source</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html\" title=\"trait log::kv::source::Source\">Source</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.visit\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/source.rs.html#177\">source</a><a href=\"#method.visit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#tymethod.visit\" class=\"fn\">visit</a>&lt;'kvs&gt;(&amp;'kvs self, visitor: &amp;mut dyn <a class=\"trait\" href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Visitor.html\" title=\"trait log::kv::source::Visitor\">Visitor</a>&lt;'kvs&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/log/0.4.20/log/kv/error/struct.Error.html\" title=\"struct log::kv::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Visit key-value pairs. <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#tymethod.visit\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/source.rs.html#185\">source</a><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#method.get\" class=\"fn\">get</a>&lt;'v&gt;(&amp;'v self, key: <a class=\"struct\" href=\"https://docs.rs/log/0.4.20/log/kv/key/struct.Key.html\" title=\"struct log::kv::key::Key\">Key</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://docs.rs/log/0.4.20/log/kv/value/struct.Value.html\" title=\"struct log::kv::value::Value\">Value</a>&lt;'v&gt;&gt;</h4></section></summary><div class='docblock'>Get the value for a given key. <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#method.get\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/source.rs.html#189\">source</a><a href=\"#method.count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#method.count\" class=\"fn\">count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Count the number of key-value pairs that can be visited. <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#method.count\">Read more</a></div></details></div></details>","Source","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoDynNode-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/dioxus_core/nodes.rs.html#808-815\">source</a><a href=\"#impl-IntoDynNode-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"dioxus_core/prelude/trait.IntoDynNode.html\" title=\"trait dioxus_core::prelude::IntoDynNode\">IntoDynNode</a>&gt; <a class=\"trait\" href=\"dioxus_core/prelude/trait.IntoDynNode.html\" title=\"trait dioxus_core::prelude::IntoDynNode\">IntoDynNode</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_dyn_node\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dioxus_core/nodes.rs.html#809-814\">source</a><a href=\"#method.into_dyn_node\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dioxus_core/prelude/trait.IntoDynNode.html#tymethod.into_dyn_node\" class=\"fn\">into_dyn_node</a>(self) -&gt; <a class=\"enum\" href=\"dioxus_core/enum.DynamicNode.html\" title=\"enum dioxus_core::DynamicNode\">DynamicNode</a></h4></section></summary><div class='docblock'>Consume this item along with a scopestate and produce a DynamicNode <a href=\"dioxus_core/prelude/trait.IntoDynNode.html#tymethod.into_dyn_node\">Read more</a></div></details></div></details>","IntoDynNode","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoAttributeValue-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/dioxus_core/nodes.rs.html#956-963\">source</a><a href=\"#impl-IntoAttributeValue-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"dioxus_core/prelude/trait.IntoAttributeValue.html\" title=\"trait dioxus_core::prelude::IntoAttributeValue\">IntoAttributeValue</a>&gt; <a class=\"trait\" href=\"dioxus_core/prelude/trait.IntoAttributeValue.html\" title=\"trait dioxus_core::prelude::IntoAttributeValue\">IntoAttributeValue</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dioxus_core/nodes.rs.html#957-962\">source</a><a href=\"#method.into_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dioxus_core/prelude/trait.IntoAttributeValue.html#tymethod.into_value\" class=\"fn\">into_value</a>(self) -&gt; <a class=\"enum\" href=\"dioxus_core/enum.AttributeValue.html\" title=\"enum dioxus_core::AttributeValue\">AttributeValue</a></h4></section></summary><div class='docblock'>Convert into an attribute value</div></details></div></details>","IntoAttributeValue","dioxus_core::innerlude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Throw-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/dioxus_core/error_boundary.rs.html#253-263\">source</a><a href=\"#impl-Throw-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"dioxus_core/prelude/trait.Throw.html\" title=\"trait dioxus_core::prelude::Throw\">Throw</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"docblock\"><p>Or just throw errors we know about</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Out\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Out\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"dioxus_core/prelude/trait.Throw.html#associatedtype.Out\" class=\"associatedtype\">Out</a> = T</h4></section></summary><div class='docblock'>The value that will be returned in if the given value is <code>Ok</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.throw\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dioxus_core/error_boundary.rs.html#256-258\">source</a><a href=\"#method.throw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dioxus_core/prelude/trait.Throw.html#tymethod.throw\" class=\"fn\">throw</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns an option that evaluates to None if there is an error, injecting the error to the nearest error boundary. <a href=\"dioxus_core/prelude/trait.Throw.html#tymethod.throw\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.throw_with\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dioxus_core/error_boundary.rs.html#260-262\">source</a><a href=\"#method.throw_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dioxus_core/prelude/trait.Throw.html#method.throw_with\" class=\"fn\">throw_with</a>&lt;D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + 'static&gt;(\n    self,\n    error: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"dioxus_core/prelude/trait.Throw.html#associatedtype.Out\" title=\"type dioxus_core::prelude::Throw::Out\">Out</a>&gt;</h4></section></summary><div class='docblock'>Returns an option that evaluates to None if there is an error, injecting the error to the nearest error boundary. <a href=\"dioxus_core/prelude/trait.Throw.html#method.throw_with\">Read more</a></div></details></div></details>","Throw","dioxus_core::innerlude::Element"]],
"dioxus_lib":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a href=\"#examples-7\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a href=\"#recommended-message-style\">Recommended Message Style</a></h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a href=\"#panics-1\">Panics</a></h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a href=\"#examples-8\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a href=\"#examples-9\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a href=\"#examples-10\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a href=\"#examples-11\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a href=\"#examples-12\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a href=\"#examples-13\">Examples</a></h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a href=\"#examples-14\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a href=\"#examples-15\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a href=\"#basic-examples\">Basic examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a href=\"#handling-a-result-based-fallback\">Handling a Result-based fallback</a></h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a href=\"#examples-16\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a href=\"#examples-17\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a href=\"#examples-18\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a href=\"#examples-19\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a href=\"#examples-20\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a href=\"#examples-21\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a href=\"#examples-22\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a href=\"#examples-23\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a href=\"#examples-24\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a href=\"#examples-25\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a href=\"#examples-26\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a href=\"#examples-27\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a href=\"#example\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a href=\"#examples-28\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a href=\"#examples-29\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a href=\"#examples-30\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a href=\"#examples-31\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a href=\"#examples-32\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a href=\"#examples-33\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a href=\"#examples-34\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a href=\"#examples-35\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1125\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1142\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1158\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1175\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2479\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2481\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2489\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2491\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2460\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2465\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2470\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1988-1990\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1993\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2389\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2451\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","dioxus_lib::prelude::Element"],["<section id=\"impl-StructuralEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-StructuralEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.StructuralEq.html\" title=\"trait core::marker::StructuralEq\">StructuralEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralEq","dioxus_lib::prelude::Element"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#829-831\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#849-851\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#874-877\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2137\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2139\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2026\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2044\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","dioxus_lib::prelude::Element"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2135\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2070\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2080\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","dioxus_lib::prelude::Element"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2010\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2020\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Throw-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-Throw-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"dioxus_lib/prelude/trait.Throw.html\" title=\"trait dioxus_lib::prelude::Throw\">Throw</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"docblock\"><p>Or just throw errors we know about</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Out\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Out\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"dioxus_lib/prelude/trait.Throw.html#associatedtype.Out\" class=\"associatedtype\">Out</a> = T</h4></section></summary><div class='docblock'>The value that will be returned in if the given value is <code>Ok</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.throw\" class=\"method trait-impl\"><a href=\"#method.throw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dioxus_lib/prelude/trait.Throw.html#tymethod.throw\" class=\"fn\">throw</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns an option that evaluates to None if there is an error, injecting the error to the nearest error boundary. <a href=\"dioxus_lib/prelude/trait.Throw.html#tymethod.throw\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.throw_with\" class=\"method trait-impl\"><a href=\"#method.throw_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dioxus_lib/prelude/trait.Throw.html#method.throw_with\" class=\"fn\">throw_with</a>&lt;D&gt;(\n    self,\n    error: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"dioxus_lib/prelude/trait.Throw.html\" title=\"trait dioxus_lib::prelude::Throw\">Throw</a>&gt;::<a class=\"associatedtype\" href=\"dioxus_lib/prelude/trait.Throw.html#associatedtype.Out\" title=\"type dioxus_lib::prelude::Throw::Out\">Out</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + 'static,</div></h4></section></summary><div class='docblock'>Returns an option that evaluates to None if there is an error, injecting the error to the nearest error boundary. <a href=\"dioxus_lib/prelude/trait.Throw.html#method.throw_with\">Read more</a></div></details></div></details>","Throw","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoAttributeValue-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-IntoAttributeValue-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"dioxus_lib/prelude/trait.IntoAttributeValue.html\" title=\"trait dioxus_lib::prelude::IntoAttributeValue\">IntoAttributeValue</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"dioxus_lib/prelude/trait.IntoAttributeValue.html\" title=\"trait dioxus_lib::prelude::IntoAttributeValue\">IntoAttributeValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_value\" class=\"method trait-impl\"><a href=\"#method.into_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dioxus_lib/prelude/trait.IntoAttributeValue.html#tymethod.into_value\" class=\"fn\">into_value</a>(self) -&gt; AttributeValue</h4></section></summary><div class='docblock'>Convert into an attribute value</div></details></div></details>","IntoAttributeValue","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoDynNode-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-IntoDynNode-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"dioxus_lib/prelude/trait.IntoDynNode.html\" title=\"trait dioxus_lib::prelude::IntoDynNode\">IntoDynNode</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"dioxus_lib/prelude/trait.IntoDynNode.html\" title=\"trait dioxus_lib::prelude::IntoDynNode\">IntoDynNode</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_dyn_node\" class=\"method trait-impl\"><a href=\"#method.into_dyn_node\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dioxus_lib/prelude/trait.IntoDynNode.html#tymethod.into_dyn_node\" class=\"fn\">into_dyn_node</a>(self) -&gt; DynamicNode</h4></section></summary><div class='docblock'>Consume this item along with a scopestate and produce a DynamicNode <a href=\"dioxus_lib/prelude/trait.IntoDynNode.html#tymethod.into_dyn_node\">Read more</a></div></details></div></details>","IntoDynNode","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.196/src/serde/de/impls.rs.html#829-831\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.196/src/serde/de/impls.rs.html#833-835\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.196/src/serde/ser/impls.rs.html#99-101\">source</a><a href=\"#impl-Serialize-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.196/src/serde/ser/impls.rs.html#104-106\">source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Value-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-Value-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Value for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: Value,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.record\" class=\"method trait-impl\"><a href=\"#method.record\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">record</a>(&amp;self, key: &amp;Field, visitor: &amp;mut dyn Visit)</h4></section></summary><div class='docblock'>Visits this value with the given <code>Visitor</code>.</div></details></div></details>","Value","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToValue-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/value.rs.html#503-505\">source</a><a href=\"#impl-ToValue-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/log/0.4.20/log/kv/value/trait.ToValue.html\" title=\"trait log::kv::value::ToValue\">ToValue</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/log/0.4.20/log/kv/value/trait.ToValue.html\" title=\"trait log::kv::value::ToValue\">ToValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/value.rs.html#507\">source</a><a href=\"#method.to_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/log/0.4.20/log/kv/value/trait.ToValue.html#tymethod.to_value\" class=\"fn\">to_value</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/log/0.4.20/log/kv/value/struct.Value.html\" title=\"struct log::kv::value::Value\">Value</a>&lt;'_&gt;</h4></section></summary><div class='docblock'>Perform the conversion.</div></details></div></details>","ToValue","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Source-for-Option%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/source.rs.html#173-175\">source</a><a href=\"#impl-Source-for-Option%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html\" title=\"trait log::kv::source::Source\">Source</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html\" title=\"trait log::kv::source::Source\">Source</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.visit\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/source.rs.html#177\">source</a><a href=\"#method.visit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#tymethod.visit\" class=\"fn\">visit</a>&lt;'kvs&gt;(&amp;'kvs self, visitor: &amp;mut dyn <a class=\"trait\" href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Visitor.html\" title=\"trait log::kv::source::Visitor\">Visitor</a>&lt;'kvs&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/log/0.4.20/log/kv/error/struct.Error.html\" title=\"struct log::kv::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Visit key-value pairs. <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#tymethod.visit\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/source.rs.html#185\">source</a><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#method.get\" class=\"fn\">get</a>&lt;'v&gt;(&amp;'v self, key: <a class=\"struct\" href=\"https://docs.rs/log/0.4.20/log/kv/key/struct.Key.html\" title=\"struct log::kv::key::Key\">Key</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://docs.rs/log/0.4.20/log/kv/value/struct.Value.html\" title=\"struct log::kv::value::Value\">Value</a>&lt;'v&gt;&gt;</h4></section></summary><div class='docblock'>Get the value for a given key. <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#method.get\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/source.rs.html#189\">source</a><a href=\"#method.count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#method.count\" class=\"fn\">count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Count the number of key-value pairs that can be visited. <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#method.count\">Read more</a></div></details></div></details>","Source","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToTokens-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/quote/1.0.35/src/quote/to_tokens.rs.html#107\">source</a><a href=\"#impl-ToTokens-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html\" title=\"trait quote::to_tokens::ToTokens\">ToTokens</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html\" title=\"trait quote::to_tokens::ToTokens\">ToTokens</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_tokens\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/quote/1.0.35/src/quote/to_tokens.rs.html#108\">source</a><a href=\"#method.to_tokens\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html#tymethod.to_tokens\" class=\"fn\">to_tokens</a>(&amp;self, tokens: &amp;mut <a class=\"struct\" href=\"https://docs.rs/proc-macro2/1.0.78/proc_macro2/struct.TokenStream.html\" title=\"struct proc_macro2::TokenStream\">TokenStream</a>)</h4></section></summary><div class='docblock'>Write <code>self</code> to the given <code>TokenStream</code>. <a href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html#tymethod.to_tokens\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_token_stream\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/quote/1.0.35/src/quote/to_tokens.rs.html#59\">source</a><a href=\"#method.to_token_stream\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html#method.to_token_stream\" class=\"fn\">to_token_stream</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/proc-macro2/1.0.78/proc_macro2/struct.TokenStream.html\" title=\"struct proc_macro2::TokenStream\">TokenStream</a></h4></section></summary><div class='docblock'>Convert <code>self</code> directly into a <code>TokenStream</code> object. <a href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html#method.to_token_stream\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_token_stream\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/quote/1.0.35/src/quote/to_tokens.rs.html#69-71\">source</a><a href=\"#method.into_token_stream\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html#method.into_token_stream\" class=\"fn\">into_token_stream</a>(self) -&gt; <a class=\"struct\" href=\"https://docs.rs/proc-macro2/1.0.78/proc_macro2/struct.TokenStream.html\" title=\"struct proc_macro2::TokenStream\">TokenStream</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Convert <code>self</code> directly into a <code>TokenStream</code> object. <a href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html#method.into_token_stream\">Read more</a></div></details></div></details>","ToTokens","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Parse-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.48/src/syn/parse.rs.html#1171\">source</a><a href=\"#impl-Parse-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/syn/2.0.48/syn/parse/trait.Parse.html\" title=\"trait syn::parse::Parse\">Parse</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/syn/2.0.48/syn/parse/trait.Parse.html\" title=\"trait syn::parse::Parse\">Parse</a> + <a class=\"trait\" href=\"https://docs.rs/syn/2.0.48/syn/token/trait.Token.html\" title=\"trait syn::token::Token\">Token</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.parse\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.48/src/syn/parse.rs.html#1172\">source</a><a href=\"#method.parse\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/syn/2.0.48/syn/parse/trait.Parse.html#tymethod.parse\" class=\"fn\">parse</a>(input: &amp;<a class=\"struct\" href=\"https://docs.rs/syn/2.0.48/syn/parse/struct.ParseBuffer.html\" title=\"struct syn::parse::ParseBuffer\">ParseBuffer</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, <a class=\"struct\" href=\"https://docs.rs/syn/2.0.48/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a>&gt;</h4></section></div></details>","Parse","dioxus_lib::prelude::Element"],["<section id=\"impl-Nullable-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/petgraph/0.4/src/petgraph/matrix_graph.rs.html#65\">source</a><a href=\"#impl-Nullable-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/petgraph/0.4/petgraph/matrix_graph/trait.Nullable.html\" title=\"trait petgraph::matrix_graph::Nullable\">Nullable</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","Nullable","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNotZero%3CT%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/petgraph/0.4/src/petgraph/matrix_graph.rs.html#131\">source</a><a href=\"#impl-From%3CNotZero%3CT%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://docs.rs/petgraph/0.4/petgraph/matrix_graph/struct.NotZero.html\" title=\"struct petgraph::matrix_graph::NotZero\">NotZero</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/petgraph/0.4/petgraph/matrix_graph/trait.Zero.html\" title=\"trait petgraph::matrix_graph::Zero\">Zero</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/petgraph/0.4/src/petgraph/matrix_graph.rs.html#132\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(not_zero: <a class=\"struct\" href=\"https://docs.rs/petgraph/0.4/petgraph/matrix_graph/struct.NotZero.html\" title=\"struct petgraph::matrix_graph::NotZero\">NotZero</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<NotZero<T>>","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnwrapThrowExt%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/lib.rs.html#1345\">source</a><a href=\"#impl-UnwrapThrowExt%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/trait.UnwrapThrowExt.html\" title=\"trait wasm_bindgen::UnwrapThrowExt\">UnwrapThrowExt</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect_throw\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/lib.rs.html#1347\">source</a><a href=\"#method.expect_throw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/trait.UnwrapThrowExt.html#tymethod.expect_throw\" class=\"fn\">expect_throw</a>(self, message: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class='docblock'>Unwrap this container’s <code>T</code> value, or throw an error to JS with the\ngiven message if the <code>T</code> value is unavailable (e.g. an <code>Option&lt;T&gt;</code> is\n<code>None</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_throw\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/lib.rs.html#1323\">source</a><a href=\"#method.unwrap_throw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/trait.UnwrapThrowExt.html#method.unwrap_throw\" class=\"fn\">unwrap_throw</a>(self) -&gt; T</h4></section></summary><div class='docblock'>Unwrap this <code>Option</code> or <code>Result</code>, but instead of panicking on failure,\nthrow an exception to JavaScript.</div></details></div></details>","UnwrapThrowExt<T>","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WasmAbi-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#34\">source</a><a href=\"#impl-WasmAbi-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&lt;Prim4 = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Prim1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Prim1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim1\" class=\"associatedtype\">Prim1</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Whether this <code>Option</code> is a <code>Some</code> value.</p>\n</div></details><section id=\"associatedtype.Prim2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Prim2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim2\" class=\"associatedtype\">Prim2</a> = &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim1\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim1\">Prim1</a></h4></section><section id=\"associatedtype.Prim3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Prim3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim3\" class=\"associatedtype\">Prim3</a> = &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim2\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim2\">Prim2</a></h4></section><section id=\"associatedtype.Prim4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Prim4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim4\" class=\"associatedtype\">Prim4</a> = &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim3\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim3\">Prim3</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.split\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#42\">source</a><a href=\"#method.split\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#tymethod.split\" class=\"fn\">split</a>(\n    self\n) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u32.html\">u32</a>, &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim1\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim1\">Prim1</a>, &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim2\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim2\">Prim2</a>, &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim3\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim3\">Prim3</a>)</h4></section></summary><div class='docblock'>Splits this type up into primitives to be sent over the ABI.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.join\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#58\">source</a><a href=\"#method.join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#tymethod.join\" class=\"fn\">join</a>(\n    is_some: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u32.html\">u32</a>,\n    prim1: &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim1\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim1\">Prim1</a>,\n    prim2: &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim2\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim2\">Prim2</a>,\n    prim3: &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim3\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim3\">Prim3</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Reconstructs this type from primitives received over the ABI.</div></details></div></details>","WasmAbi","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromWasmAbi-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#305\">source</a><a href=\"#impl-FromWasmAbi-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::FromWasmAbi\">FromWasmAbi</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.OptionFromWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::OptionFromWasmAbi\">OptionFromWasmAbi</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Abi\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Abi\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html#associatedtype.Abi\" class=\"associatedtype\">Abi</a> = &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::FromWasmAbi\">FromWasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html#associatedtype.Abi\" title=\"type wasm_bindgen::convert::traits::FromWasmAbi::Abi\">Abi</a></h4></section></summary><div class='docblock'>The wasm ABI type that this converts from when coming back out from the\nABI boundary.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_abi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#309\">source</a><a href=\"#method.from_abi\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html#tymethod.from_abi\" class=\"fn\">from_abi</a>(js: &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::FromWasmAbi\">FromWasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html#associatedtype.Abi\" title=\"type wasm_bindgen::convert::traits::FromWasmAbi::Abi\">Abi</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Recover a <code>Self</code> from <code>Self::Abi</code>. <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html#tymethod.from_abi\">Read more</a></div></details></div></details>","FromWasmAbi","dioxus_lib::prelude::Element"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoWasmAbi-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#293\">source</a><a href=\"#impl-IntoWasmAbi-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::IntoWasmAbi\">IntoWasmAbi</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.OptionIntoWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::OptionIntoWasmAbi\">OptionIntoWasmAbi</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Abi\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Abi\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html#associatedtype.Abi\" class=\"associatedtype\">Abi</a> = &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::IntoWasmAbi\">IntoWasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html#associatedtype.Abi\" title=\"type wasm_bindgen::convert::traits::IntoWasmAbi::Abi\">Abi</a></h4></section></summary><div class='docblock'>The wasm ABI type that this converts into when crossing the ABI\nboundary.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_abi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#297\">source</a><a href=\"#method.into_abi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html#tymethod.into_abi\" class=\"fn\">into_abi</a>(self) -&gt; &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::IntoWasmAbi\">IntoWasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html#associatedtype.Abi\" title=\"type wasm_bindgen::convert::traits::IntoWasmAbi::Abi\">Abi</a></h4></section></summary><div class='docblock'>Convert <code>self</code> into <code>Self::Abi</code> so that it can be sent across the wasm\nABI boundary.</div></details></div></details>","IntoWasmAbi","dioxus_lib::prelude::Element"]],
"dioxus_mobile":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#585\">source</a><a href=\"#impl-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#605\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.is_some\" class=\"fn\">is_some</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_some_and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#626\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.is_some_and\" class=\"fn\">is_some_and</a>(self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> and the value inside of it matches a predicate.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_some_and(|x| x &gt; <span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#649\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the option is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> value.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.is_none(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.48.0\">1.0.0 (const: 1.48.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#680\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an <code>Option&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>\nwithout moving the <a href=\"../../std/string/struct.String.html\" title=\"String\"><code>String</code></a>. The <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.map\" title=\"method core::option::Option::map\"><code>map</code></a> method takes the <code>self</code> argument by value,\nconsuming the original, so this technique uses <code>as_ref</code> to first take an <code>Option</code> to a\nreference to the value inside the original.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>text: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Hello, world!\"</span>.to_string());\n<span class=\"comment\">// First, cast `Option&lt;String&gt;` to `Option&lt;&amp;String&gt;` with `as_ref`,\n// then consume *that* with `map`, leaving `text` on the stack.\n</span><span class=\"kw\">let </span>text_length: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = text.as_ref().map(|s| s.len());\n<span class=\"macro\">println!</span>(<span class=\"string\">\"still can print text: {text:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#702\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.</p>\n<h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>x.as_mut() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#716\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_pin_ref\" class=\"fn\">as_pin_ref</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\" title=\"shared reference\">&amp;</a>T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_pin_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_pin_mut\" class=\"fn\">as_pin_mut</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code><a href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> Option&lt;T&gt;&gt;</code> to <code>Option&lt;<a href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\" title=\"mutable reference\">&amp;mut</a> T&gt;&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#770\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a slice of the contained value, if any. If this is <code>None</code>, an\nempty slice is returned. This can be useful to have a single type of\niterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;T&gt;</code> and wish to get a slice of <code>T</code>,\nyou can unpack it via <code>opt.map_or(&amp;[], std::slice::from_ref)</code>.</p>\n<h5 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_slice(), <span class=\"prelude-val\">None</span>.as_slice()],\n    [<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;</span>[][..]],\n);</code></pre></div>\n<p>The inverse of this function is (discounting\nborrowing) <a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html#method.first\" title=\"method slice::first\"><code>[_]::first</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">for </span>i <span class=\"kw\">in </span>[<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234_u16</span>), <span class=\"prelude-val\">None</span>] {\n    <span class=\"macro\">assert_eq!</span>(i.as_ref(), i.as_slice().first());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable slice of the contained value, if any. If this is\n<code>None</code>, an empty slice is returned. This can be useful to have a\nsingle type of iterator over an <code>Option</code> or slice.</p>\n<p>Note: Should you have an <code>Option&lt;&amp;mut T&gt;</code> instead of a\n<code>&amp;mut Option&lt;T&gt;</code>, which this method takes, you can obtain a mutable\nslice via <code>opt.map_or(&amp;mut [], std::slice::from_mut)</code>.</p>\n<h5 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>).as_mut_slice(), <span class=\"prelude-val\">None</span>.as_mut_slice()],\n    [<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1234</span>][..], <span class=\"kw-2\">&amp;mut </span>[][..]],\n);</code></pre></div>\n<p>The result is a mutable slice of zero or one items that points into\nour original <code>Option</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1234</span>);\nx.as_mut_slice()[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1235</span>));</code></pre></div>\n<p>The inverse of this method (discounting borrowing)\nis <a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html#method.first_mut\" title=\"method slice::first_mut\"><code>[_]::first_mut</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">123</span>).as_mut_slice().first_mut(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">123</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#891\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.expect\" class=\"fn\">expect</a>(self, msg: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>Panics if the value is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> with a custom panic message provided by\n<code>msg</code>.</p>\n<h5 id=\"examples-7\"><a href=\"#examples-7\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"value\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.expect(<span class=\"string\">\"fruits are healthy\"</span>), <span class=\"string\">\"value\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\nx.expect(<span class=\"string\">\"fruits are healthy\"</span>); <span class=\"comment\">// panics with `fruits are healthy`</span></code></pre></div>\n<h5 id=\"recommended-message-style\"><a href=\"#recommended-message-style\">Recommended Message Style</a></h5>\n<p>We recommend that <code>expect</code> messages are used to describe the reason you\n<em>expect</em> the <code>Option</code> should be <code>Some</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>item = slice.get(<span class=\"number\">0</span>)\n    .expect(<span class=\"string\">\"slice should not be empty\"</span>);</code></pre></div>\n<p><strong>Hint</strong>: If you’re having trouble remembering how to phrase expect\nerror messages remember to focus on the word “should” as in “env\nvariable should be set by blah” or “the given binary should be available\nand executable by the current user”.</p>\n<p>For more detail on expect message styles and the reasoning behind our\nrecommendation please refer to the section on <a href=\"../../std/error/index.html#common-message-styles\">“Common Message\nStyles”</a> in the <a href=\"../../std/error/index.html\"><code>std::error</code></a> module docs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#928\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.unwrap\" class=\"fn\">unwrap</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value.</p>\n<p>Because this function may panic, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\ncase explicitly, or call <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.unwrap_or\" title=\"method core::option::Option::unwrap_or\"><code>unwrap_or</code></a>, <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>, or\n<a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.unwrap_or_default\" title=\"method core::option::Option::unwrap_or_default\"><code>unwrap_or_default</code></a>.</p>\n<h5 id=\"panics-1\"><a href=\"#panics-1\">Panics</a></h5>\n<p>Panics if the self value equals <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-8\"><a href=\"#examples-8\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.unwrap(), <span class=\"string\">\"air\"</span>); <span class=\"comment\">// fails</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#951\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.unwrap_or\" class=\"fn\">unwrap_or</a>(self, default: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a provided default.</p>\n<p>Arguments passed to <code>unwrap_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.unwrap_or_else\" title=\"method core::option::Option::unwrap_or_else\"><code>unwrap_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-9\"><a href=\"#examples-9\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"car\"</span>).unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"car\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or(<span class=\"string\">\"bike\"</span>), <span class=\"string\">\"bike\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#970-972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.unwrap_or_else\" class=\"fn\">unwrap_or_else</a>&lt;F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or computes it from a closure.</p>\n<h5 id=\"examples-10\"><a href=\"#examples-10\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.unwrap_or_else(|| <span class=\"number\">2 </span>* k), <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_or_default\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1001-1003\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.unwrap_or_default\" class=\"fn\">unwrap_or_default</a>(self) -&gt; T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value or a default.</p>\n<p>Consumes the <code>self</code> argument then, if <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, returns the contained\nvalue, otherwise if <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, returns the <a href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html#tymethod.default\" title=\"associated function core::default::Default::default\">default value</a> for that\ntype.</p>\n<h5 id=\"examples-11\"><a href=\"#examples-11\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.unwrap_or_default(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(y.unwrap_or_default(), <span class=\"number\">12</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const unstable\">1.58.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91930\" title=\"Tracking issue for const_option_ext\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1035\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.unwrap_unchecked\" class=\"fn\">unwrap_unchecked</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the contained <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> value, consuming the <code>self</code> value,\nwithout checking that the value is not <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>Calling this method on <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.</p>\n<h5 id=\"examples-12\"><a href=\"#examples-12\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"air\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>);</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ x.unwrap_unchecked() }, <span class=\"string\">\"air\"</span>); <span class=\"comment\">// Undefined behavior!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1067-1069\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a contained value (if <code>Some</code>) or returns <code>None</code> (if <code>None</code>).</p>\n<h5 id=\"examples-13\"><a href=\"#examples-13\">Examples</a></h5>\n<p>Calculates the length of an <code>Option&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> as an\n<code>Option&lt;<a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming the original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>maybe_some_string = <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`\n</span><span class=\"kw\">let </span>maybe_some_len = maybe_some_string.map(|s| s.len());\n<span class=\"macro\">assert_eq!</span>(maybe_some_len, <span class=\"prelude-val\">Some</span>(<span class=\"number\">13</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map(|s| s.len()), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inspect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.76.0\">1.76.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1092\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>),</div></h4></section></summary><div class=\"docblock\"><p>Calls the provided closure with a reference to the contained value (if <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>).</p>\n<h5 id=\"examples-14\"><a href=\"#examples-14\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"comment\">// prints \"got: 4\"\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">3</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));\n\n<span class=\"comment\">// prints nothing\n</span><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>usize&gt; = v.get(<span class=\"number\">5</span>).inspect(|x| <span class=\"macro\">println!</span>(<span class=\"string\">\"got: {x}\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1121-1123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.map_or\" class=\"fn\">map_or</a>&lt;U, F&gt;(self, default: U, f: F) -&gt; U<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Returns the provided default result (if none),\nor applies a function to the contained value (if any).</p>\n<p>Arguments passed to <code>map_or</code> are eagerly evaluated; if you are passing\nthe result of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.map_or_else\" title=\"method core::option::Option::map_or_else\"><code>map_or_else</code></a>,\nwhich is lazily evaluated.</p>\n<h5 id=\"examples-15\"><a href=\"#examples-15\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or(<span class=\"number\">42</span>, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1166-1169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.map_or_else\" class=\"fn\">map_or_else</a>&lt;U, D, F&gt;(self, default: D, f: F) -&gt; U<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; U,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Computes a default function result (if none), or\napplies a different function to the contained value (if any).</p>\n<h5 id=\"basic-examples\"><a href=\"#basic-examples\">Basic examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>k = <span class=\"number\">21</span>;\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.map_or_else(|| <span class=\"number\">2 </span>* k, |v| v.len()), <span class=\"number\">42</span>);</code></pre></div>\n<h5 id=\"handling-a-result-based-fallback\"><a href=\"#handling-a-result-based-fallback\">Handling a Result-based fallback</a></h5>\n<p>A somewhat common occurrence when dealing with optional values\nin combination with <a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a> is the case where one wants to invoke\na fallible fallback if the option is not present.  This example\nparses a command line argument (if present), or the contents of a file to\nan integer.  However, unlike accessing the command line argument, reading\nthe file is fallible, so it must be wrapped with <code>Ok</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64 = std::env::args()\n   .nth(<span class=\"number\">1</span>)\n   .map_or_else(|| std::fs::read_to_string(<span class=\"string\">\"/etc/someconfig.conf\"</span>), <span class=\"prelude-val\">Ok</span>)<span class=\"question-mark\">?\n   </span>.parse()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1200\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.ok_or\" class=\"fn\">ok_or</a>&lt;E&gt;(self, err: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err)</code></a>.</p>\n<p>Arguments passed to <code>ok_or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.ok_or_else\" title=\"method core::option::Option::ok_or_else\"><code>ok_or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-16\"><a href=\"#examples-16\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or(<span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ok_or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1225-1227\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.ok_or_else\" class=\"fn\">ok_or_else</a>&lt;E, F&gt;(self, err: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; E,</div></h4></section></summary><div class=\"docblock\"><p>Transforms the <code>Option&lt;T&gt;</code> into a <a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\"><code>Result&lt;T, E&gt;</code></a>, mapping <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(v)</code></a> to\n<a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok(v)</code></a> and <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> to <a href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err(err())</code></a>.</p>\n<h5 id=\"examples-17\"><a href=\"#examples-17\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.ok_or_else(|| <span class=\"number\">0</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1251-1253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_deref\" class=\"fn\">as_deref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to <code>Option&lt;&amp;T::Target&gt;</code>.</p>\n<p>Leaves the original Option in-place, creating a new one with a reference\nto the original one, additionally coercing the contents via <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"><code>Deref</code></a>.</p>\n<h5 id=\"examples-18\"><a href=\"#examples-18\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.as_deref(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1277-1279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.as_deref_mut\" class=\"fn\">as_deref_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to <code>Option&lt;&amp;mut T::Target&gt;</code>.</p>\n<p>Leaves the original <code>Option</code> in-place, creating a new one containing a mutable reference to\nthe inner type’s <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"associated type core::ops::deref::Deref::Target\"><code>Deref::Target</code></a> type.</p>\n<h5 id=\"examples-19\"><a href=\"#examples-19\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hey\"</span>.to_owned());\n<span class=\"macro\">assert_eq!</span>(x.as_deref_mut().map(|x| {\n    x.make_ascii_uppercase();\n    x\n}), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HEY\"</span>.to_owned().as_mut_str()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/option/struct.Iter.html\" title=\"struct core::option::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the possibly contained value.</p>\n<h5 id=\"examples-20\"><a href=\"#examples-20\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/option/struct.IterMut.html\" title=\"struct core::option::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable iterator over the possibly contained value.</p>\n<h5 id=\"examples-21\"><a href=\"#examples-21\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>);\n<span class=\"kw\">match </span>x.iter_mut().next() {\n    <span class=\"prelude-val\">Some</span>(v) =&gt; <span class=\"kw-2\">*</span>v = <span class=\"number\">42</span>,\n    <span class=\"prelude-val\">None </span>=&gt; {},\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.iter_mut().next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.and\" class=\"fn\">and</a>&lt;U&gt;(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>and</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.and_then\" title=\"method core::option::Option::and_then\"><code>and_then</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-22\"><a href=\"#examples-22\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>str&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.and(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_then\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1401-1403\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.and_then\" class=\"fn\">and_then</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>f</code> with the\nwrapped value and returns the result.</p>\n<p>Some languages call this operation flatmap.</p>\n<h5 id=\"examples-23\"><a href=\"#examples-23\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>sq_then_to_string(x: u32) -&gt; <span class=\"prelude-ty\">Option</span>&lt;String&gt; {\n    x.checked_mul(x).map(|sq| sq.to_string())\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">1_000_000</span>).and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// overflowed!\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.and_then(sq_then_to_string), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Often used to chain fallible operations that may return <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>arr_2d = [[<span class=\"string\">\"A0\"</span>, <span class=\"string\">\"A1\"</span>], [<span class=\"string\">\"B0\"</span>, <span class=\"string\">\"B1\"</span>]];\n\n<span class=\"kw\">let </span>item_0_1 = arr_2d.get(<span class=\"number\">0</span>).and_then(|row| row.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(item_0_1, <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"A1\"</span>));\n\n<span class=\"kw\">let </span>item_2_0 = arr_2d.get(<span class=\"number\">2</span>).and_then(|row| row.get(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(item_2_0, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1437-1439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the option is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, otherwise calls <code>predicate</code>\nwith the wrapped value and returns:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some(t)</code></a> if <code>predicate</code> returns <code>true</code> (where <code>t</code> is the wrapped\nvalue), and</li>\n<li><a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if <code>predicate</code> returns <code>false</code>.</li>\n</ul>\n<p>This function works similar to <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html#method.filter\" title=\"method core::iter::traits::iterator::Iterator::filter\"><code>Iterator::filter()</code></a>. You can imagine\nthe <code>Option&lt;T&gt;</code> being an iterator over one or zero elements. <code>filter()</code>\nlets you decide which elements to keep.</p>\n<h5 id=\"examples-24\"><a href=\"#examples-24\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>is_even(n: <span class=\"kw-2\">&amp;</span>i32) -&gt; bool {\n    n % <span class=\"number\">2 </span>== <span class=\"number\">0\n</span>}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>).filter(is_even), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>).filter(is_even), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.or\" class=\"fn\">or</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise returns <code>optb</code>.</p>\n<p>Arguments passed to <code>or</code> are eagerly evaluated; if you are passing the\nresult of a function call, it is recommended to use <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.or_else\" title=\"method core::option::Option::or_else\"><code>or_else</code></a>, which is\nlazily evaluated.</p>\n<h5 id=\"examples-25\"><a href=\"#examples-25\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.or(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.or_else\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1500-1502\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.or_else\" class=\"fn\">or_else</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the option if it contains a value, otherwise calls <code>f</code> and\nreturns the result.</p>\n<h5 id=\"examples-26\"><a href=\"#examples-26\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>nobody() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">None </span>}\n<span class=\"kw\">fn </span>vikings() -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str&gt; { <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>) }\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>).or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"barbarians\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(vikings), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"vikings\"</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>.or_else(nobody), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.xor\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1533\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.xor\" class=\"fn\">xor</a>(self, optb: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> if exactly one of <code>self</code>, <code>optb</code> is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-27\"><a href=\"#examples-27\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"macro\">assert_eq!</span>(x.xor(y), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option, then returns a mutable reference to it.</p>\n<p>If the option already contains a value, the old value is dropped.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.get_or_insert\" title=\"method core::option::Option::get_or_insert\"><code>Option::get_or_insert</code></a>, which doesn’t update the value if\nthe option already contains <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"example\"><a href=\"#example\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>opt = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>val = opt.insert(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>val, <span class=\"number\">2</span>);\n<span class=\"kw-2\">*</span>val = <span class=\"number\">3</span>;\n<span class=\"macro\">assert_eq!</span>(opt.unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1596\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>(&amp;mut self, value: T) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Inserts <code>value</code> into the option if it is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<p>See also <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.insert\" title=\"method core::option::Option::insert\"><code>Option::insert</code></a>, which updates the value even if\nthe option already contains <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples-28\"><a href=\"#examples-28\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert(<span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1627-1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.get_or_insert_default\" class=\"fn\">get_or_insert_default</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_get_or_insert_default</code>)</span></div></span></summary><div class=\"docblock\"><p>Inserts the default value into the option if it is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, then\nreturns a mutable reference to the contained value.</p>\n<h5 id=\"examples-29\"><a href=\"#examples-29\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_get_or_insert_default)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_default();\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1653-1655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a value computed from <code>f</code> into the option if it is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nthen returns a mutable reference to the contained value.</p>\n<h5 id=\"examples-30\"><a href=\"#examples-30\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n\n{\n    <span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>u32 = x.get_or_insert_with(|| <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(y, <span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>);\n\n    <span class=\"kw-2\">*</span>y = <span class=\"number\">7</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">7</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of the option, leaving a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> in its place.</p>\n<h5 id=\"examples-31\"><a href=\"#examples-31\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>y = x.take();\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1721-1723\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.take_if\" class=\"fn\">take_if</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_take_if</code>)</span></div></span></summary><div class=\"docblock\"><p>Takes the value out of the option, but only if the predicate evaluates to\n<code>true</code> on a mutable reference to the value.</p>\n<p>In other words, replaces <code>self</code> with <code>None</code> if the predicate returns <code>true</code>.\nThis method operates similar to <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#method.take\" title=\"method core::option::Option::take\"><code>Option::take</code></a> but conditional.</p>\n<h5 id=\"examples-32\"><a href=\"#examples-32\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_take_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>v == <span class=\"number\">42 </span>{\n    <span class=\"kw-2\">*</span>v += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">false\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prev = x.take_if(|v| <span class=\"kw-2\">*</span>v == <span class=\"number\">43</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(prev, <span class=\"prelude-val\">Some</span>(<span class=\"number\">43</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0, const unstable\">1.31.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67441\" title=\"Tracking issue for const_option\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1748\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Replaces the actual value in the option by the value given in parameter,\nreturning the old value if present,\nleaving a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a> in its place without deinitializing either one.</p>\n<h5 id=\"examples-33\"><a href=\"#examples-33\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>old = x.replace(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(old, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1768\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.tuple.html\">(T, U)</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Zips <code>self</code> with another <code>Option</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some((s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-34\"><a href=\"#examples-34\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hi\"</span>);\n<span class=\"kw\">let </span>z = <span class=\"prelude-val\">None</span>::&lt;u8&gt;;\n\n<span class=\"macro\">assert_eq!</span>(x.zip(y), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"hi\"</span>)));\n<span class=\"macro\">assert_eq!</span>(x.zip(z), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_with\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1804-1806\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#tymethod.zip_with\" class=\"fn\">zip_with</a>&lt;U, F, R&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(T, U) -&gt; R,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>option_zip</code>)</span></div></span></summary><div class=\"docblock\"><p>Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.</p>\n<p>If <code>self</code> is <code>Some(s)</code> and <code>other</code> is <code>Some(o)</code>, this method returns <code>Some(f(s, o))</code>.\nOtherwise, <code>None</code> is returned.</p>\n<h5 id=\"examples-35\"><a href=\"#examples-35\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(option_zip)]\n\n#[derive(Debug, PartialEq)]\n</span><span class=\"kw\">struct </span>Point {\n    x: f64,\n    y: f64,\n}\n\n<span class=\"kw\">impl </span>Point {\n    <span class=\"kw\">fn </span>new(x: f64, y: f64) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self </span>{ x, y }\n    }\n}\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"number\">17.5</span>);\n<span class=\"kw\">let </span>y = <span class=\"prelude-val\">Some</span>(<span class=\"number\">42.7</span>);\n\n<span class=\"macro\">assert_eq!</span>(x.zip_with(y, Point::new), <span class=\"prelude-val\">Some</span>(Point { x: <span class=\"number\">17.5</span>, y: <span class=\"number\">42.7 </span>}));\n<span class=\"macro\">assert_eq!</span>(x.zip_with(<span class=\"prelude-val\">None</span>, Point::new), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-PartialOrd-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1125\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1142\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1158\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1175\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/iter/traits/accum.rs.html#244-246\">source</a></span><a href=\"#impl-Product%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/iter/traits/accum.rs.html#265-267\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the product of all elements is returned.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<p>This multiplies each number in a vector of strings,\nif a string could not be parsed the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"kw\">let </span>nums = <span class=\"macro\">vec!</span>[<span class=\"string\">\"5\"</span>, <span class=\"string\">\"10\"</span>, <span class=\"string\">\"one\"</span>, <span class=\"string\">\"2\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = nums.iter().map(|w| w.parse::&lt;usize&gt;().ok()).product();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Product<Option<U>>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2479\">source</a><a href=\"#impl-FromResidual-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2481\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(residual: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2489\">source</a><a href=\"#impl-FromResidual%3CYeet%3C()%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html\" title=\"trait core::ops::try_trait::FromResidual\">FromResidual</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2491\">source</a><a href=\"#method.from_residual\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/struct.Yeet.html\" title=\"struct core::ops::try_trait::Yeet\">Yeet</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from a compatible <code>Residual</code> type. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details>","FromResidual<Yeet<()>>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Try-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2460\">source</a><a href=\"#impl-Try-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>The type of the value passed to <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function core::ops::try_trait::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2465\">source</a><a href=\"#method.from_output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(output: &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Constructs the type from its <code>Output</code> type. <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2470\">source</a><a href=\"#method.branch\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/control_flow/enum.ControlFlow.html\" title=\"enum core::ops::control_flow::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Residual\" title=\"type core::ops::try_trait::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html\" title=\"trait core::ops::try_trait::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#associatedtype.Output\" title=\"type core::ops::try_trait::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>)</span></div></span><div class='docblock'>Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/control_flow/enum.ControlFlow.html#variant.Continue\" title=\"variant core::ops::control_flow::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/control_flow/enum.ControlFlow.html#variant.Break\" title=\"variant core::ops::control_flow::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"https://doc.rust-lang.org/1.76.0/core/ops/try_trait/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details>","Try","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1988-1990\">source</a></span><a href=\"#impl-Clone-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#1993\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2001\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2389\">source</a></span><a href=\"#impl-FromIterator%3COption%3CA%3E%3E-for-Option%3CV%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2451\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>,\nno further elements are taken, and the <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is\nreturned. Should no <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> occur, a container of type\n<code>V</code> containing the values of each <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\"><code>Option</code></a> is returned.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<p>Here is an example which increments every integer in a vector.\nWe use the checked variant of <code>add</code> that returns <code>None</code> when the\ncalculation would result in an overflow.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">0_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_add(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));</code></pre></div>\n<p>As you can see, this will return the expected, valid items.</p>\n<p>Here is another example that tries to subtract one from another list\nof integers, this time checking for underflow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">2_u16</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| x.checked_sub(<span class=\"number\">1</span>))\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>Since the last element is zero, it would underflow. Thus, the resulting\nvalue is <code>None</code>.</p>\n<p>Here is a variation on the previous example, showing that no\nfurther elements are taken from <code>iter</code> after the first <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>items = <span class=\"macro\">vec!</span>[<span class=\"number\">3_u16</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shared = <span class=\"number\">0</span>;\n\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u16&gt;&gt; = items\n    .iter()\n    .map(|x| { shared += x; x.checked_sub(<span class=\"number\">2</span>) })\n    .collect();\n\n<span class=\"macro\">assert_eq!</span>(res, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(shared, <span class=\"number\">6</span>);</code></pre></div>\n<p>Since the third element caused an underflow, no further elements were taken,\nso the final value of <code>shared</code> is 6 (= <code>3 + 2 + 1</code>), not 16.</p>\n</div></details></div></details>","FromIterator<Option<A>>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<section id=\"impl-StructuralEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-StructuralEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.StructuralEq.html\" title=\"trait core::marker::StructuralEq\">StructuralEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralEq","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<section id=\"impl-Eq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Eq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Hash-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#829-831\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#849-851\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#874-877\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2137\">source</a></span><a href=\"#impl-PartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2139\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2026\">source</a></span><a href=\"#impl-IntoIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2044\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a consuming iterator over the possibly contained value.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"string\"</span>);\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"string\"</span>]);\n\n<span class=\"kw\">let </span>x = <span class=\"prelude-val\">None</span>;\n<span class=\"kw\">let </span>v: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = x.into_iter().collect();\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/option/struct.IntoIter.html\" title=\"struct core::option::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/iter/traits/accum.rs.html#214-216\">source</a></span><a href=\"#impl-Sum%3COption%3CU%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/iter/traits/accum.rs.html#235-237\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Takes each element in the <a href=\"https://doc.rust-lang.org/1.76.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\"><code>Iterator</code></a>: if it is a <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>, no further\nelements are taken, and the <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned. Should no <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>\noccur, the sum of all elements is returned.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<p>This sums up the position of the character ‘a’ in a vector of strings,\nif a word did not have the character ‘a’ the operation returns <code>None</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"great\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"kw\">let </span>words = <span class=\"macro\">vec!</span>[<span class=\"string\">\"have\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"good\"</span>, <span class=\"string\">\"day\"</span>];\n<span class=\"kw\">let </span>total: <span class=\"prelude-ty\">Option</span>&lt;usize&gt; = words.iter().map(|w| w.find(<span class=\"string\">'a'</span>)).sum();\n<span class=\"macro\">assert_eq!</span>(total, <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>","Sum<Option<U>>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<section id=\"impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2135\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","StructuralPartialEq","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Debug-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2070\">source</a></span><a href=\"#impl-From%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2080\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves <code>val</code> into a new <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: <span class=\"prelude-ty\">Option</span>&lt;u8&gt; = Option::from(<span class=\"number\">67</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"number\">67</span>), o);</code></pre></div>\n</div></details></div></details>","From<T>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<section id=\"impl-Copy-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#566\">source</a></span><a href=\"#impl-Copy-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2010\">source</a></span><a href=\"#impl-Default-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/option.rs.html#2020\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <a href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>opt: <span class=\"prelude-ty\">Option</span>&lt;u32&gt; = Option::default();\n<span class=\"macro\">assert!</span>(opt.is_none());</code></pre></div>\n</div></details></div></details>","Default","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Throw-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/dioxus_core/error_boundary.rs.html#253\">source</a><a href=\"#impl-Throw-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"dioxus_core/error_boundary/trait.Throw.html\" title=\"trait dioxus_core::error_boundary::Throw\">Throw</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"docblock\"><p>Or just throw errors we know about</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Out\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Out\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"dioxus_core/error_boundary/trait.Throw.html#associatedtype.Out\" class=\"associatedtype\">Out</a> = T</h4></section></summary><div class='docblock'>The value that will be returned in if the given value is <code>Ok</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.throw\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dioxus_core/error_boundary.rs.html#256\">source</a><a href=\"#method.throw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dioxus_core/error_boundary/trait.Throw.html#tymethod.throw\" class=\"fn\">throw</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns an option that evaluates to None if there is an error, injecting the error to the nearest error boundary. <a href=\"dioxus_core/error_boundary/trait.Throw.html#tymethod.throw\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.throw_with\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dioxus_core/error_boundary.rs.html#260\">source</a><a href=\"#method.throw_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dioxus_core/error_boundary/trait.Throw.html#method.throw_with\" class=\"fn\">throw_with</a>&lt;D&gt;(\n    self,\n    error: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as <a class=\"trait\" href=\"dioxus_core/error_boundary/trait.Throw.html\" title=\"trait dioxus_core::error_boundary::Throw\">Throw</a>&gt;::<a class=\"associatedtype\" href=\"dioxus_core/error_boundary/trait.Throw.html#associatedtype.Out\" title=\"type dioxus_core::error_boundary::Throw::Out\">Out</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + 'static,</div></h4></section></summary><div class='docblock'>Returns an option that evaluates to None if there is an error, injecting the error to the nearest error boundary. <a href=\"dioxus_core/error_boundary/trait.Throw.html#method.throw_with\">Read more</a></div></details></div></details>","Throw","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoAttributeValue-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/dioxus_core/nodes.rs.html#956\">source</a><a href=\"#impl-IntoAttributeValue-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"dioxus_core/nodes/trait.IntoAttributeValue.html\" title=\"trait dioxus_core::nodes::IntoAttributeValue\">IntoAttributeValue</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"dioxus_core/nodes/trait.IntoAttributeValue.html\" title=\"trait dioxus_core::nodes::IntoAttributeValue\">IntoAttributeValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dioxus_core/nodes.rs.html#957\">source</a><a href=\"#method.into_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dioxus_core/nodes/trait.IntoAttributeValue.html#tymethod.into_value\" class=\"fn\">into_value</a>(self) -&gt; <a class=\"enum\" href=\"dioxus_core/nodes/enum.AttributeValue.html\" title=\"enum dioxus_core::nodes::AttributeValue\">AttributeValue</a></h4></section></summary><div class='docblock'>Convert into an attribute value</div></details></div></details>","IntoAttributeValue","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoDynNode-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/dioxus_core/nodes.rs.html#808\">source</a><a href=\"#impl-IntoDynNode-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"dioxus_core/nodes/trait.IntoDynNode.html\" title=\"trait dioxus_core::nodes::IntoDynNode\">IntoDynNode</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"dioxus_core/nodes/trait.IntoDynNode.html\" title=\"trait dioxus_core::nodes::IntoDynNode\">IntoDynNode</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_dyn_node\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/dioxus_core/nodes.rs.html#809\">source</a><a href=\"#method.into_dyn_node\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"dioxus_core/nodes/trait.IntoDynNode.html#tymethod.into_dyn_node\" class=\"fn\">into_dyn_node</a>(self) -&gt; <a class=\"enum\" href=\"dioxus_core/nodes/enum.DynamicNode.html\" title=\"enum dioxus_core::nodes::DynamicNode\">DynamicNode</a></h4></section></summary><div class='docblock'>Consume this item along with a scopestate and produce a DynamicNode <a href=\"dioxus_core/nodes/trait.IntoDynNode.html#tymethod.into_dyn_node\">Read more</a></div></details></div></details>","IntoDynNode","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.196/src/serde/de/impls.rs.html#829-831\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.196/src/serde/de/impls.rs.html#833-835\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.196/src/serde/ser/impls.rs.html#99-101\">source</a><a href=\"#impl-Serialize-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.196/src/serde/ser/impls.rs.html#104-106\">source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Value-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-Value-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Value for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: Value,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.record\" class=\"method trait-impl\"><a href=\"#method.record\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">record</a>(&amp;self, key: &amp;Field, visitor: &amp;mut dyn Visit)</h4></section></summary><div class='docblock'>Visits this value with the given <code>Visitor</code>.</div></details></div></details>","Value","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToValue-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/value.rs.html#503-505\">source</a><a href=\"#impl-ToValue-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/log/0.4.20/log/kv/value/trait.ToValue.html\" title=\"trait log::kv::value::ToValue\">ToValue</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/log/0.4.20/log/kv/value/trait.ToValue.html\" title=\"trait log::kv::value::ToValue\">ToValue</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/value.rs.html#507\">source</a><a href=\"#method.to_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/log/0.4.20/log/kv/value/trait.ToValue.html#tymethod.to_value\" class=\"fn\">to_value</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/log/0.4.20/log/kv/value/struct.Value.html\" title=\"struct log::kv::value::Value\">Value</a>&lt;'_&gt;</h4></section></summary><div class='docblock'>Perform the conversion.</div></details></div></details>","ToValue","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Source-for-Option%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/source.rs.html#173-175\">source</a><a href=\"#impl-Source-for-Option%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html\" title=\"trait log::kv::source::Source\">Source</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html\" title=\"trait log::kv::source::Source\">Source</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.visit\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/source.rs.html#177\">source</a><a href=\"#method.visit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#tymethod.visit\" class=\"fn\">visit</a>&lt;'kvs&gt;(&amp;'kvs self, visitor: &amp;mut dyn <a class=\"trait\" href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Visitor.html\" title=\"trait log::kv::source::Visitor\">Visitor</a>&lt;'kvs&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://docs.rs/log/0.4.20/log/kv/error/struct.Error.html\" title=\"struct log::kv::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Visit key-value pairs. <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#tymethod.visit\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/source.rs.html#185\">source</a><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#method.get\" class=\"fn\">get</a>&lt;'v&gt;(&amp;'v self, key: <a class=\"struct\" href=\"https://docs.rs/log/0.4.20/log/kv/key/struct.Key.html\" title=\"struct log::kv::key::Key\">Key</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://docs.rs/log/0.4.20/log/kv/value/struct.Value.html\" title=\"struct log::kv::value::Value\">Value</a>&lt;'v&gt;&gt;</h4></section></summary><div class='docblock'>Get the value for a given key. <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#method.get\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/log/0.4.20/src/log/kv/source.rs.html#189\">source</a><a href=\"#method.count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#method.count\" class=\"fn\">count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Count the number of key-value pairs that can be visited. <a href=\"https://docs.rs/log/0.4.20/log/kv/source/trait.Source.html#method.count\">Read more</a></div></details></div></details>","Source","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToTokens-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/quote/1.0.35/src/quote/to_tokens.rs.html#107\">source</a><a href=\"#impl-ToTokens-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html\" title=\"trait quote::to_tokens::ToTokens\">ToTokens</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html\" title=\"trait quote::to_tokens::ToTokens\">ToTokens</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_tokens\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/quote/1.0.35/src/quote/to_tokens.rs.html#108\">source</a><a href=\"#method.to_tokens\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html#tymethod.to_tokens\" class=\"fn\">to_tokens</a>(&amp;self, tokens: &amp;mut <a class=\"struct\" href=\"https://docs.rs/proc-macro2/1.0.78/proc_macro2/struct.TokenStream.html\" title=\"struct proc_macro2::TokenStream\">TokenStream</a>)</h4></section></summary><div class='docblock'>Write <code>self</code> to the given <code>TokenStream</code>. <a href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html#tymethod.to_tokens\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_token_stream\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/quote/1.0.35/src/quote/to_tokens.rs.html#59\">source</a><a href=\"#method.to_token_stream\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html#method.to_token_stream\" class=\"fn\">to_token_stream</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/proc-macro2/1.0.78/proc_macro2/struct.TokenStream.html\" title=\"struct proc_macro2::TokenStream\">TokenStream</a></h4></section></summary><div class='docblock'>Convert <code>self</code> directly into a <code>TokenStream</code> object. <a href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html#method.to_token_stream\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_token_stream\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/quote/1.0.35/src/quote/to_tokens.rs.html#69-71\">source</a><a href=\"#method.into_token_stream\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html#method.into_token_stream\" class=\"fn\">into_token_stream</a>(self) -&gt; <a class=\"struct\" href=\"https://docs.rs/proc-macro2/1.0.78/proc_macro2/struct.TokenStream.html\" title=\"struct proc_macro2::TokenStream\">TokenStream</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Convert <code>self</code> directly into a <code>TokenStream</code> object. <a href=\"https://docs.rs/quote/1.0.35/quote/to_tokens/trait.ToTokens.html#method.into_token_stream\">Read more</a></div></details></div></details>","ToTokens","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Parse-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.48/src/syn/parse.rs.html#1171\">source</a><a href=\"#impl-Parse-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/syn/2.0.48/syn/parse/trait.Parse.html\" title=\"trait syn::parse::Parse\">Parse</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/syn/2.0.48/syn/parse/trait.Parse.html\" title=\"trait syn::parse::Parse\">Parse</a> + <a class=\"trait\" href=\"https://docs.rs/syn/2.0.48/syn/token/trait.Token.html\" title=\"trait syn::token::Token\">Token</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.parse\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/syn/2.0.48/src/syn/parse.rs.html#1172\">source</a><a href=\"#method.parse\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/syn/2.0.48/syn/parse/trait.Parse.html#tymethod.parse\" class=\"fn\">parse</a>(input: &amp;<a class=\"struct\" href=\"https://docs.rs/syn/2.0.48/syn/parse/struct.ParseBuffer.html\" title=\"struct syn::parse::ParseBuffer\">ParseBuffer</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, <a class=\"struct\" href=\"https://docs.rs/syn/2.0.48/syn/error/struct.Error.html\" title=\"struct syn::error::Error\">Error</a>&gt;</h4></section></div></details>","Parse","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<section id=\"impl-Nullable-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/petgraph/0.4/src/petgraph/matrix_graph.rs.html#65\">source</a><a href=\"#impl-Nullable-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/petgraph/0.4/petgraph/matrix_graph/trait.Nullable.html\" title=\"trait petgraph::matrix_graph::Nullable\">Nullable</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section>","Nullable","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNotZero%3CT%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/petgraph/0.4/src/petgraph/matrix_graph.rs.html#131\">source</a><a href=\"#impl-From%3CNotZero%3CT%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://docs.rs/petgraph/0.4/petgraph/matrix_graph/struct.NotZero.html\" title=\"struct petgraph::matrix_graph::NotZero\">NotZero</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/petgraph/0.4/petgraph/matrix_graph/trait.Zero.html\" title=\"trait petgraph::matrix_graph::Zero\">Zero</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/petgraph/0.4/src/petgraph/matrix_graph.rs.html#132\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(not_zero: <a class=\"struct\" href=\"https://docs.rs/petgraph/0.4/petgraph/matrix_graph/struct.NotZero.html\" title=\"struct petgraph::matrix_graph::NotZero\">NotZero</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<NotZero<T>>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnwrapThrowExt%3CT%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/lib.rs.html#1345\">source</a><a href=\"#impl-UnwrapThrowExt%3CT%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/trait.UnwrapThrowExt.html\" title=\"trait wasm_bindgen::UnwrapThrowExt\">UnwrapThrowExt</a>&lt;T&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.expect_throw\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/lib.rs.html#1347\">source</a><a href=\"#method.expect_throw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/trait.UnwrapThrowExt.html#tymethod.expect_throw\" class=\"fn\">expect_throw</a>(self, message: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.str.html\">str</a>) -&gt; T</h4></section></summary><div class='docblock'>Unwrap this container’s <code>T</code> value, or throw an error to JS with the\ngiven message if the <code>T</code> value is unavailable (e.g. an <code>Option&lt;T&gt;</code> is\n<code>None</code>).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_throw\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/lib.rs.html#1323\">source</a><a href=\"#method.unwrap_throw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/trait.UnwrapThrowExt.html#method.unwrap_throw\" class=\"fn\">unwrap_throw</a>(self) -&gt; T</h4></section></summary><div class='docblock'>Unwrap this <code>Option</code> or <code>Result</code>, but instead of panicking on failure,\nthrow an exception to JavaScript.</div></details></div></details>","UnwrapThrowExt<T>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WasmAbi-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#34\">source</a><a href=\"#impl-WasmAbi-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&lt;Prim4 = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Prim1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Prim1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim1\" class=\"associatedtype\">Prim1</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Whether this <code>Option</code> is a <code>Some</code> value.</p>\n</div></details><section id=\"associatedtype.Prim2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Prim2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim2\" class=\"associatedtype\">Prim2</a> = &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim1\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim1\">Prim1</a></h4></section><section id=\"associatedtype.Prim3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Prim3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim3\" class=\"associatedtype\">Prim3</a> = &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim2\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim2\">Prim2</a></h4></section><section id=\"associatedtype.Prim4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Prim4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim4\" class=\"associatedtype\">Prim4</a> = &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim3\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim3\">Prim3</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.split\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#42\">source</a><a href=\"#method.split\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#tymethod.split\" class=\"fn\">split</a>(\n    self\n) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u32.html\">u32</a>, &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim1\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim1\">Prim1</a>, &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim2\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim2\">Prim2</a>, &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim3\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim3\">Prim3</a>)</h4></section></summary><div class='docblock'>Splits this type up into primitives to be sent over the ABI.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.join\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#58\">source</a><a href=\"#method.join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#tymethod.join\" class=\"fn\">join</a>(\n    is_some: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u32.html\">u32</a>,\n    prim1: &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim1\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim1\">Prim1</a>,\n    prim2: &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim2\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim2\">Prim2</a>,\n    prim3: &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::WasmAbi\">WasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.WasmAbi.html#associatedtype.Prim3\" title=\"type wasm_bindgen::convert::traits::WasmAbi::Prim3\">Prim3</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Reconstructs this type from primitives received over the ABI.</div></details></div></details>","WasmAbi","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromWasmAbi-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#305\">source</a><a href=\"#impl-FromWasmAbi-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::FromWasmAbi\">FromWasmAbi</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.OptionFromWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::OptionFromWasmAbi\">OptionFromWasmAbi</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Abi\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Abi\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html#associatedtype.Abi\" class=\"associatedtype\">Abi</a> = &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::FromWasmAbi\">FromWasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html#associatedtype.Abi\" title=\"type wasm_bindgen::convert::traits::FromWasmAbi::Abi\">Abi</a></h4></section></summary><div class='docblock'>The wasm ABI type that this converts from when coming back out from the\nABI boundary.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_abi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#309\">source</a><a href=\"#method.from_abi\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html#tymethod.from_abi\" class=\"fn\">from_abi</a>(js: &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::FromWasmAbi\">FromWasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html#associatedtype.Abi\" title=\"type wasm_bindgen::convert::traits::FromWasmAbi::Abi\">Abi</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Recover a <code>Self</code> from <code>Self::Abi</code>. <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html#tymethod.from_abi\">Read more</a></div></details></div></details>","FromWasmAbi","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoWasmAbi-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#293\">source</a><a href=\"#impl-IntoWasmAbi-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::IntoWasmAbi\">IntoWasmAbi</a> for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.OptionIntoWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::OptionIntoWasmAbi\">OptionIntoWasmAbi</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Abi\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Abi\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html#associatedtype.Abi\" class=\"associatedtype\">Abi</a> = &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::IntoWasmAbi\">IntoWasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html#associatedtype.Abi\" title=\"type wasm_bindgen::convert::traits::IntoWasmAbi::Abi\">Abi</a></h4></section></summary><div class='docblock'>The wasm ABI type that this converts into when crossing the ABI\nboundary.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_abi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#297\">source</a><a href=\"#method.into_abi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html#tymethod.into_abi\" class=\"fn\">into_abi</a>(self) -&gt; &lt;T as <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::IntoWasmAbi\">IntoWasmAbi</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html#associatedtype.Abi\" title=\"type wasm_bindgen::convert::traits::IntoWasmAbi::Abi\">Abi</a></h4></section></summary><div class='docblock'>Convert <code>self</code> into <code>Self::Abi</code> so that it can be sent across the wasm\nABI boundary.</div></details></div></details>","IntoWasmAbi","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromValue%3C'a%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-FromValue%3C'a%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, C, E&gt; FromValue&lt;'a&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: FromValue&lt;'a, Checker = C&gt; + StaticType,\n    C: ValueTypeChecker&lt;Error = ValueTypeMismatchOrNoneError&lt;E&gt;&gt;,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,</div></h3></section></summary><div class=\"docblock\"><p>Blanket implementation for all optional types.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Checker\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Checker\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Checker</a> = ValueTypeOrNoneChecker&lt;T, C, E&gt;</h4></section></summary><div class='docblock'>Value type checker.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_value\" class=\"method trait-impl\"><a href=\"#method.from_value\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">from_value</a>(value: &amp;'a Value) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Get the contained value from a <code>Value</code>. <a>Read more</a></div></details></div></details>","FromValue<'a>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StaticVariantType-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-StaticVariantType-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; StaticVariantType for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: StaticVariantType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.static_variant_type\" class=\"method trait-impl\"><a href=\"#method.static_variant_type\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">static_variant_type</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'static, VariantTy&gt;</h4></section></summary><div class='docblock'>Returns the <code>VariantType</code> corresponding to <code>Self</code>.</div></details></div></details>","StaticVariantType","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromGlibPtrBorrow%3CP%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-FromGlibPtrBorrow%3CP%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, T&gt; FromGlibPtrBorrow&lt;P&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: Ptr,\n    T: FromGlibPtrBorrow&lt;P&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_glib_borrow\" class=\"method trait-impl\"><a href=\"#method.from_glib_borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">from_glib_borrow</a>(ptr: P) -&gt; Borrowed&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>Safety <a>Read more</a></div></details></div></details>","FromGlibPtrBorrow<P>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromGlib%3CG%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-FromGlib%3CG%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;G, T&gt; FromGlib&lt;G&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,\n    T: TryFromGlib&lt;G, Error = GlibNoneError&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_glib\" class=\"method trait-impl\"><a href=\"#method.from_glib\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">from_glib</a>(val: G) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></div></details>","FromGlib<G>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToGlibPtr%3C'a,+P%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-ToGlibPtr%3C'a,+P%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, P, T&gt; ToGlibPtr&lt;'a, P&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: Ptr,\n    T: ToGlibPtr&lt;'a, P&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Storage\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Storage\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Storage</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;T as ToGlibPtr&lt;'a, P&gt;&gt;::Storage&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_glib_none\" class=\"method trait-impl\"><a href=\"#method.to_glib_none\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_glib_none</a>(&amp;'a self) -&gt; Stash&lt;'a, P, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>Transfer: none. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_glib_full\" class=\"method trait-impl\"><a href=\"#method.to_glib_full\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_glib_full</a>(&amp;self) -&gt; P</h4></section></summary><div class='docblock'>Transfer: full. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_glib_container\" class=\"method trait-impl\"><a href=\"#method.to_glib_container\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_glib_container</a>(&amp;'a self) -&gt; Stash&lt;'a, P, Self&gt;</h4></section></summary><div class='docblock'>Transfer: container. <a>Read more</a></div></details></div></details>","ToGlibPtr<'a, P>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoGlib-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-IntoGlib-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; IntoGlib for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: OptionIntoGlib,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.GlibType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.GlibType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">GlibType</a> = &lt;T as IntoGlib&gt;::GlibType</h4></section><section id=\"method.into_glib\" class=\"method trait-impl\"><a href=\"#method.into_glib\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_glib</a>(self) -&gt; &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as IntoGlib&gt;::GlibType</h4></section></div></details>","IntoGlib","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CastNone-for-Option%3CI%3E\" class=\"impl\"><a href=\"#impl-CastNone-for-Option%3CI%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; CastNone for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;I&gt;<div class=\"where\">where\n    I: ObjectType,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Inner\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Inner\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Inner</a> = I</h4></section><section id=\"method.and_downcast\" class=\"method trait-impl\"><a href=\"#method.and_downcast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_downcast</a>&lt;T&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: ObjectType,\n    &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;I&gt; as CastNone&gt;::Inner: MayDowncastTo&lt;T&gt;,</div></h4></section><section id=\"method.and_downcast_ref\" class=\"method trait-impl\"><a href=\"#method.and_downcast_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_downcast_ref</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>&gt;<div class=\"where\">where\n    T: ObjectType,\n    &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;I&gt; as CastNone&gt;::Inner: MayDowncastTo&lt;T&gt;,</div></h4></section><section id=\"method.and_upcast\" class=\"method trait-impl\"><a href=\"#method.and_upcast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_upcast</a>&lt;T&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: ObjectType,\n    &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;I&gt; as CastNone&gt;::Inner: IsA&lt;T&gt;,</div></h4></section><section id=\"method.and_upcast_ref\" class=\"method trait-impl\"><a href=\"#method.and_upcast_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_upcast_ref</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>&gt;<div class=\"where\">where\n    T: ObjectType,\n    &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;I&gt; as CastNone&gt;::Inner: IsA&lt;T&gt;,</div></h4></section><section id=\"method.and_dynamic_cast\" class=\"method trait-impl\"><a href=\"#method.and_dynamic_cast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_dynamic_cast</a>&lt;T&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;I&gt;&gt;<div class=\"where\">where\n    T: ObjectType,</div></h4></section><section id=\"method.and_dynamic_cast_ref\" class=\"method trait-impl\"><a href=\"#method.and_dynamic_cast_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">and_dynamic_cast_ref</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>&gt;<div class=\"where\">where\n    T: ObjectType,</div></h4></section></div></details>","CastNone","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromGlibPtrFull%3CP%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-FromGlibPtrFull%3CP%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, T&gt; FromGlibPtrFull&lt;P&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: Ptr,\n    T: FromGlibPtrFull&lt;P&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_glib_full\" class=\"method trait-impl\"><a href=\"#method.from_glib_full\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">from_glib_full</a>(ptr: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Safety <a>Read more</a></div></details></div></details>","FromGlibPtrFull<P>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoOptionalGStr-for-Option%3CS%3E\" class=\"impl\"><a href=\"#impl-IntoOptionalGStr-for-Option%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; IntoOptionalGStr for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt;<div class=\"where\">where\n    S: IntoGStr,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.run_with_gstr\" class=\"method trait-impl\"><a href=\"#method.run_with_gstr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">run_with_gstr</a>&lt;T, F&gt;(self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;GStr&gt;) -&gt; T,</div></h4></section></div></details>","IntoOptionalGStr","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasParamSpec-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-HasParamSpec-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; HasParamSpec for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: ToValueOptional + HasParamSpec,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.ParamSpec\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ParamSpec\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">ParamSpec</a> = &lt;T as HasParamSpec&gt;::ParamSpec</h4></section><details class=\"toggle\" open><summary><section id=\"associatedtype.SetValue\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.SetValue\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">SetValue</a> = &lt;T as HasParamSpec&gt;::SetValue</h4></section></summary><div class='docblock'>Preferred value to be used as setter for the associated ParamSpec.</div></details><section id=\"associatedtype.BuilderFn\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.BuilderFn\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">BuilderFn</a> = &lt;T as HasParamSpec&gt;::BuilderFn</h4></section><section id=\"method.param_spec_builder\" class=\"method trait-impl\"><a href=\"#method.param_spec_builder\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">param_spec_builder</a>() -&gt; &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as HasParamSpec&gt;::BuilderFn</h4></section></div></details>","HasParamSpec","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ValueType-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-ValueType-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C, E&gt; ValueType for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: for&lt;'a&gt; FromValue&lt;'a, Checker = C&gt; + ValueTypeOptional + StaticType + 'static,\n    C: ValueTypeChecker&lt;Error = ValueTypeMismatchOrNoneError&lt;E&gt;&gt;,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Type\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Type\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Type</a> = &lt;T as ValueType&gt;::Type</h4></section></summary><div class='docblock'>Type to get the <code>Type</code> from. <a>Read more</a></div></details></div></details>","ValueType","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToVariant-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-ToVariant-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ToVariant for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: StaticVariantType + ToVariant,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_variant\" class=\"method trait-impl\"><a href=\"#method.to_variant\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_variant</a>(&amp;self) -&gt; Variant</h4></section></summary><div class='docblock'>Returns a <code>Variant</code> clone of <code>self</code>.</div></details></div></details>","ToVariant","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToValue-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-ToValue-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ToValue for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: ToValueOptional + StaticType,</div></h3></section></summary><div class=\"docblock\"><p>Blanket implementation for all optional types.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_value\" class=\"method trait-impl\"><a href=\"#method.to_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_value</a>(&amp;self) -&gt; Value</h4></section></summary><div class='docblock'>Convert a value to a <code>Value</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_type\" class=\"method trait-impl\"><a href=\"#method.value_type\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">value_type</a>(&amp;self) -&gt; Type</h4></section></summary><div class='docblock'>Returns the type identifer of <code>self</code>. <a>Read more</a></div></details></div></details>","ToValue","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoGlibPtr%3CP%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-IntoGlibPtr%3CP%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, T&gt; IntoGlibPtr&lt;P&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: Ptr,\n    T: IntoGlibPtr&lt;P&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_glib_ptr\" class=\"method trait-impl\"><a href=\"#method.into_glib_ptr\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">into_glib_ptr</a>(self) -&gt; P</h4></section></summary><div class='docblock'>Transfer: full.</div></details></div></details>","IntoGlibPtr<P>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromGlibPtrNone%3CP%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-FromGlibPtrNone%3CP%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, T&gt; FromGlibPtrNone&lt;P&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    P: Ptr,\n    T: FromGlibPtrNone&lt;P&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_glib_none\" class=\"method trait-impl\"><a href=\"#method.from_glib_none\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">from_glib_none</a>(ptr: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Safety <a>Read more</a></div></details></div></details>","FromGlibPtrNone<P>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StaticType-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-StaticType-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; StaticType for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: ToValueOptional + StaticType,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.static_type\" class=\"method trait-impl\"><a href=\"#method.static_type\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">static_type</a>() -&gt; Type</h4></section></summary><div class='docblock'>Returns the type identifier of <code>Self</code>.</div></details></div></details>","StaticType","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromVariant-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-FromVariant-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; FromVariant for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: StaticVariantType + FromVariant,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_variant\" class=\"method trait-impl\"><a href=\"#method.from_variant\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_variant</a>(variant: &amp;Variant) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;</h4></section></summary><div class='docblock'>Tries to extract a value. <a>Read more</a></div></details></div></details>","FromVariant","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3COptional%3CT%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3COptional%3CT%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Optional&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: Optional&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Optional<T>>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCtOption%3CT%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.5.0/src/subtle/lib.rs.html#654\">source</a><a href=\"#impl-From%3CCtOption%3CT%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://docs.rs/subtle/2.5.0/subtle/struct.CtOption.html\" title=\"struct subtle::CtOption\">CtOption</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.5.0/src/subtle/lib.rs.html#664\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(source: <a class=\"struct\" href=\"https://docs.rs/subtle/2.5.0/subtle/struct.CtOption.html\" title=\"struct subtle::CtOption\">CtOption</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Convert the <code>CtOption&lt;T&gt;</code> wrapper into an <code>Option&lt;T&gt;</code>, depending on whether\nthe underlying <code>is_some</code> <code>Choice</code> was a <code>0</code> or a <code>1</code> once unwrapped.</p>\n<h5 id=\"note\"><a href=\"#note\">Note</a></h5>\n<p>This function exists to avoid ending up with ugly, verbose and/or bad handled\nconversions from the <code>CtOption&lt;T&gt;</code> wraps to an <code>Option&lt;T&gt;</code> or <code>Result&lt;T, E&gt;</code>.\nThis implementation doesn’t intend to be constant-time nor try to protect the\nleakage of the <code>T</code> since the <code>Option&lt;T&gt;</code> will do it anyways.</p>\n</div></details></div></details>","From<CtOption<T>>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OrderedStream-for-Option%3CS%3E\" class=\"impl\"><a href=\"#impl-OrderedStream-for-Option%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; OrderedStream for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt;<div class=\"where\">where\n    S: OrderedStream,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Data\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Data\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Data</a> = &lt;S as OrderedStream&gt;::Data</h4></section></summary><div class='docblock'>The unordered data carried by this stream <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Ordering\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Ordering\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Ordering</a> = &lt;S as OrderedStream&gt;::Ordering</h4></section></summary><div class='docblock'>The type ordered by this stream. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_next_before\" class=\"method trait-impl\"><a href=\"#method.poll_next_before\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll_next_before</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    before: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt; as OrderedStream&gt;::Ordering&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;PollResult&lt;&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt; as OrderedStream&gt;::Ordering, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt; as OrderedStream&gt;::Data&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to pull out the next value of this stream, registering the current task for wakeup\nif needed, and returning <code>NoneBefore</code> if it is known that the stream will not produce any\nmore values ordered before the given point. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.position_hint\" class=\"method trait-impl\"><a href=\"#method.position_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">position_hint</a>(\n    &amp;self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;MaybeBorrowed&lt;'_, &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt; as OrderedStream&gt;::Ordering&gt;&gt;</h4></section></summary><div class='docblock'>The minimum value of the ordering for any future items. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size_hint</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>&gt;)</h4></section></summary><div class='docblock'>Returns the bounds on the remaining length of the stream.</div></details></div></details>","OrderedStream","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FusedOrderedStream-for-Option%3CS%3E\" class=\"impl\"><a href=\"#impl-FusedOrderedStream-for-Option%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; FusedOrderedStream for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt;<div class=\"where\">where\n    S: FusedOrderedStream,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_terminated\" class=\"method trait-impl\"><a href=\"#method.is_terminated\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_terminated</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the stream should no longer be polled.</div></details></div></details>","FusedOrderedStream","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CInheritable%3CT%3E%3E-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CInheritable%3CT%3E%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Inheritable&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(val: Inheritable&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p><code>None</code> if inherited</p>\n</div></details></div></details>","From<Inheritable<T>>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Context%3CT,+Infallible%3E-for-Option%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/anyhow/1.0.79/src/anyhow/context.rs.html#90\">source</a><a href=\"#impl-Context%3CT,+Infallible%3E-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://docs.rs/anyhow/1.0.79/anyhow/trait.Context.html\" title=\"trait anyhow::Context\">Context</a>&lt;T, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;</h3></section></summary><div class=\"docblock\">\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>anyhow::{Context, <span class=\"prelude-ty\">Result</span>};\n\n<span class=\"kw\">fn </span>maybe_get() -&gt; <span class=\"prelude-ty\">Option</span>&lt;T&gt; {\n    ...\n}\n\n<span class=\"kw\">fn </span>demo() -&gt; <span class=\"prelude-ty\">Result</span>&lt;()&gt; {\n    <span class=\"kw\">let </span>t = maybe_get().context(<span class=\"string\">\"there is no T\"</span>)<span class=\"question-mark\">?</span>;\n    ...\n}</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.context\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/anyhow/1.0.79/src/anyhow/context.rs.html#91-93\">source</a><a href=\"#method.context\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/anyhow/1.0.79/anyhow/trait.Context.html#tymethod.context\" class=\"fn\">context</a>&lt;C&gt;(self, context: C) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"https://docs.rs/anyhow/1.0.79/anyhow/struct.Error.html\" title=\"struct anyhow::Error\">Error</a>&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class='docblock'>Wrap the error value with additional context.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_context\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/anyhow/1.0.79/src/anyhow/context.rs.html#103-106\">source</a><a href=\"#method.with_context\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/anyhow/1.0.79/anyhow/trait.Context.html#tymethod.with_context\" class=\"fn\">with_context</a>&lt;C, F&gt;(self, context: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"https://docs.rs/anyhow/1.0.79/anyhow/struct.Error.html\" title=\"struct anyhow::Error\">Error</a>&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; C,</div></h4></section></summary><div class='docblock'>Wrap the error value with additional context that is evaluated lazily\nonly once an error does occur.</div></details></div></details>","Context<T, Infallible>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromParallelIterator%3COption%3CT%3E%3E-for-Option%3CC%3E\" class=\"impl\"><a href=\"#impl-FromParallelIterator%3COption%3CT%3E%3E-for-Option%3CC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, T&gt; FromParallelIterator&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;C&gt;<div class=\"where\">where\n    C: FromParallelIterator&lt;T&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section></summary><div class=\"docblock\"><p>Collect an arbitrary <code>Option</code>-wrapped collection.</p>\n<p>If any item is <code>None</code>, then all previous items collected are discarded,\nand it returns only <code>None</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_par_iter\" class=\"method trait-impl\"><a href=\"#method.from_par_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_par_iter</a>&lt;I&gt;(par_iter: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;C&gt;<div class=\"where\">where\n    I: IntoParallelIterator&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt;,</div></h4></section></summary><div class='docblock'>Creates an instance of the collection from the parallel iterator <code>par_iter</code>. <a>Read more</a></div></details></div></details>","FromParallelIterator<Option<T>>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoParallelIterator-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-IntoParallelIterator-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; IntoParallelIterator for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of item that the parallel iterator will produce.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Iter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Iter</a> = IntoIter&lt;T&gt;</h4></section></summary><div class='docblock'>The parallel iterator type that will be created.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_par_iter\" class=\"method trait-impl\"><a href=\"#method.into_par_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_par_iter</a>(self) -&gt; &lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt; as IntoParallelIterator&gt;::Iter</h4></section></summary><div class='docblock'>Converts <code>self</code> into a parallel iterator. <a>Read more</a></div></details></div></details>","IntoParallelIterator","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<section id=\"impl-Pod-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-Pod-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Pod for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: PodInOption,</div></h3></section>","Pod","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zeroable-for-Option%3CT%3E\" class=\"impl\"><a href=\"#impl-Zeroable-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Zeroable for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: ZeroableInOption,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroed\" class=\"method trait-impl\"><a href=\"#method.zeroed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zeroed</a>() -&gt; Self</h4></section></summary><div class='docblock'>Calls <a href=\"https://doc.rust-lang.org/1.76.0/core/mem/fn.zeroed.html\" title=\"fn core::mem::zeroed\"><code>zeroed</code></a>. <a>Read more</a></div></details></div></details>","Zeroable","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ValidateResult-for-Option%3CS%3E\" class=\"impl\"><a href=\"#impl-ValidateResult-for-Option%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; ValidateResult for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt;<div class=\"where\">where\n    S: ValidateResult,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.validate_result\" class=\"method trait-impl\"><a href=\"#method.validate_result\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">validate_result</a>(\n    &amp;self,\n    other: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;S&gt;,\n    options: ValidationOptions,\n    location: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class='docblock'>Compare self with the other.\nExceptional behaviour: <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.assert_equals_result\" class=\"method trait-impl\"><a href=\"#method.assert_equals_result\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">assert_equals_result</a>(&amp;self, result: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Compare self with the other. Panics if not equal. <a>Read more</a></div></details></div></details>","ValidateResult","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SerializeAs%3COption%3CT%3E%3E-for-Option%3CU%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.6.0/src/serde_with/ser/impls.rs.html#118-120\">source</a><a href=\"#impl-SerializeAs%3COption%3CT%3E%3E-for-Option%3CU%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.6.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.6.0/serde_with/ser/trait.SerializeAs.html\" title=\"trait serde_with::ser::SerializeAs\">SerializeAs</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.6.0/src/serde_with/ser/impls.rs.html#122-124\">source</a><a href=\"#method.serialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.6.0/serde_with/ser/trait.SerializeAs.html#tymethod.serialize_as\" class=\"fn\">serialize_as</a>&lt;S&gt;(\n    source: &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,\n    serializer: S\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer.</div></details></div></details>","SerializeAs<Option<T>>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DeserializeAs%3C'de,+Option%3CT%3E%3E-for-Option%3CU%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.6.0/src/serde_with/de/impls.rs.html#119-121\">source</a><a href=\"#impl-DeserializeAs%3C'de,+Option%3CT%3E%3E-for-Option%3CU%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, T, U&gt; <a class=\"trait\" href=\"https://docs.rs/serde_with/3.6.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;U&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"https://docs.rs/serde_with/3.6.0/serde_with/de/trait.DeserializeAs.html\" title=\"trait serde_with::de::DeserializeAs\">DeserializeAs</a>&lt;'de, T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_as\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.6.0/src/serde_with/de/impls.rs.html#123-125\">source</a><a href=\"#method.deserialize_as\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_with/3.6.0/serde_with/de/trait.DeserializeAs.html#tymethod.deserialize_as\" class=\"fn\">deserialize_as</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.196/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer.</div></details></div></details>","DeserializeAs<'de, Option<T>>","dioxus_mobile::tao::platform::unix::x11::ffi::XConnectionWatchProc","dioxus_mobile::tao::platform::unix::x11::ffi::XIMProc","dioxus_mobile::tao::platform::unix::x11::ffi::XICProc","dioxus_mobile::tao::platform::unix::x11::xdisplay::XErrorHandler"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()